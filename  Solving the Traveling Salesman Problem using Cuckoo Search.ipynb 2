{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overview \n",
    "\n",
    "In this paper, I mainly aim to explore the Cuckoo Search algorithm and apply it to the traveling salesman problem. However, I begin by explaining and implementing Dijkstra's greedy algorithm so that I can have a baseline with which to compare Cuckoo Search.\n",
    "\n",
    "What this paper aims to show is how randomisation used in conjunction with greedy techniques solves the problem of falling into local optima which greedy algorithms face."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Traveling Salesman Problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview \n",
    "\n",
    "The Traveling Salesman Problem (TSP) is a famous NP-hard problem. This means that if we break the larger problem down into smaller components, each problem will be at least as complex as the original larger problem (Wikipedia, 2019).\n",
    "\n",
    "In this problem, there are $N$ cities, which distances $d_{ij}$ between each other stored in matrix $D.$ The goal of of the TSP tour is to visit each city once and end up at your starting point while minimising your overall distance travelled.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Traditional Greedy Aproach: Dijkstra \n",
    "\n",
    "Djikstra's algorithm provides a different approach to solving the TSP. It makes the greedy choice at each step and in this way can get stuck at local optima. I will implement his algorithm to contrast it with CS and show how CS uses randomisation to sometimes take big steps which may be suboptimal to and escape local optima.\n",
    "\n",
    "We can see two nested for loops in this algorithm which give us a time complexity $O(V^2)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "#function to find the minimum distance\n",
    "def min_dist(distance, Q): \n",
    "        V= 11 \n",
    "        \n",
    "        #make intitial minimum distance big \n",
    "        min1 = sys.maxsize\n",
    "  \n",
    "        #find the smallest distance not already used\n",
    "        #in the shortest path \n",
    "        for v in range(V): \n",
    "            if distance[v] < min1 and Q[v] == False: \n",
    "                min1 = distance[v] \n",
    "                index = v \n",
    "        return index \n",
    "    \n",
    "\n",
    "#function to solve the TSP using Dijkstra\n",
    "def dijkstra(source,inputMatrix): \n",
    "    \n",
    "    #number of nodes \n",
    "    V = 11\n",
    "\n",
    "    #initialise distances \n",
    "    distance = [sys.maxsize] * V \n",
    "    \n",
    "    #initialise source distance \n",
    "    distance[source] = 0\n",
    "    \n",
    "    #there is nothing in Q for now\n",
    "    Q = [False]*V \n",
    "  \n",
    "    for i in range(V): \n",
    "            \n",
    "        #choose the edge with the minimum distance\n",
    "        #from the set of edges we have not yet used \n",
    "        u = min_dist(distance, Q) \n",
    "  \n",
    "        #add u to the edges which were visited \n",
    "        Q[u] = True\n",
    "  \n",
    "        #add the distances from the input matrix to the solution\n",
    "        for v in range(V): \n",
    "            if inputMatrix[u][v] > 0 and Q[v] == False and distance[v] > distance[u] + inputMatrix[u][v]: \n",
    "                distance[v] = distance[u] + inputMatrix[u][v] \n",
    "        \n",
    "    return sum(distance), distance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Problem of Local Optima \n",
    "\n",
    "Dijkstra's algorithm and many other traditionally greedy approaches to solving TSP face the risk of falling into a locally optimal solution, and not finding the global optima. The graph below shows point A, which is a local minima, and point B, which is a global minima. The greedy approach constantly takes the shortest distance it can, which means it could miss out on a better solution overall by taking a longer step at one point, but having an overall shorter distance traveled. \n",
    "\n",
    "We will see how we can still use a greedy approach to solve TSP, but avoid local optima by using randomisation. An algorithm which uses such an approach is called Cuckoo Search (CS) which will be explored below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename='ag.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cuckoo Search "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Overview \n",
    "Cuckoo search (CS) is a metaheuristic optimisation algorithm (Gandomi et al., 2013). A metaheuristic optimisation algorithm takes a heuristic or pattern followed in a different context, and applies it to an algorithm. In this case, the algorithm is inspired by nature and the nesting behaviour of cuckoos. \n",
    "\n",
    "Cuckoos engage in something called *obligate brood parasitism* which means that they lay their eggs in other species of birds' nests (Wikipedia, 2019). However, if the host bird discovers that there is an egg which is not its own in its nest it will either throw the egg away, or abandon the nest entirely and build a new one somewhere else because they do not wish to raise birds which are not their own (Senthil, 2018).\n",
    "\n",
    "Cuckoo search mimics the behaviour of cuckoos to find the best solution to a problem by following these rules:\n",
    "\n",
    "- Each cuckoo lays an egg in one randomly chosen nest\n",
    "\n",
    "- The nest best nest with the egg with the highest fitness value will continue to the next generation\n",
    "\n",
    "- There are a fixed number of host nests and the cuckoo egg has a probability between 0 and 1 of being discovered (Ouaarab et al., 2014). \n",
    "\n",
    "\n",
    "### Lévy Flights\n",
    "\n",
    "Cuckoo search makes use of Lévy flights which are a way of searching a space using random walks. The distance of each step is defined by a *power law* which ensures that short steps are common and long jumps are rare (Jain, 2017). This is done by creating a distribution which is *heavy-tailed.* If a probability distribution is heavy-tailed it means that there is a higher probability density in the tails than a traditional Gaussian distributiion (Wikipedia, 2019).\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from random import uniform\n",
    "from random import randint \n",
    "import math\n",
    "\n",
    "#function to generate a random number between 2 bounds\n",
    "def random_num():\n",
    "    return uniform(0.00001,0.99999)\n",
    "\n",
    "#function to follow the power law \n",
    "#by having an exponent of -1/3 the distribution \n",
    "#will follow a power law \n",
    "def levy(a):\n",
    "\treturn math.pow(a,-1/3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the plot below we can see how most of the steps taken will be short, and a few will be longer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEWCAYAAACdaNcBAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAFhVJREFUeJzt3X+0XWV95/H3RyJQ5NdqExWSQFDijwyjoinUoSNYKIIidK12KUyhYKnUacFaaDtYKFramYq2Om3FQQoOiAVEqjVqFOsAU9sBTQDBEoqTSfkRUQi/5IcWiP3OH2dfPVzuzT03uTfnnof3a62zcvbez3n2956b9bnPec4+z0lVIUlqy3OGXYAkaeYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcn8WSnJfkD2aorz2SPJZkm2772iS/NhN9d/19McnxM9XfNM77x0nuT/LdrX3uLZHkhCT/0Lf9WJIXDfjYSrL37FWnrcFwb1SSO5L8IMmjSR5O8n+SvCPJj37nVfWOqvqjAfs6ZFNtququqtqxqn44A7W/N8knxvV/eFVdvKV9T7OOxcBpwLKqeuEExw9Ksn5r1jTu/Eu6IH6s73bzRG273826GTjn0/5oaO6aN+wCNKveXFVfSbILcCDw58D+wNtm8iRJ5lXVxpnsc47YE3igqu4bdiFT2LXR519bwJH7s0BVfa+qVgBvBY5Psg9AkouS/HF3f36Sz3ej/AeTfDXJc5JcAuwBfK4bGf5e34jxxCR3AVf37esfMLw4ydeTfC/JZ5P8ZHeuZ4x4x14dJDkM+H3grf0j0f5pnq6uM5PcmeS+JB/v/oD1j2aPT3JXN6VyxmTPTZJdusdv6Po7s+v/EODvgN27Oi6aznOeZLskf9rVcG83BfYT3bHbkhzR13ZeV+erk3whySnj+rolyS9M5/wT1POjqZYkP5Xkc0keSbKqm3oaPxo/JMn/TfJQknPT83LgPOC13XPycNffG5Os6V4lfjvJ72xJrZoZhvuzSFV9HVgP/McJDp/WHVsAvIBewFZVHQfcRe9VwI5V9f6+xxwIvBx4wySn/BXgV4HdgY3AXwxQ45eA/wZ8sjvfKydodkJ3ez3wImBH4MPj2vws8FLgYOCsLpgm8pfALl0/B3Y1v62qvgIcDtzT1XHCVLWPcw7wEuBVwN7AQuCs7thlwDF9bd8A3F9VNwIXA8eOHUjyyu6xK6d5/k05F3gceCFwfHcb7wjgp4FXAm8B3lBVtwHvAK7rnpNdu7YXAr9eVTsB+wBXz2Ct2kyG+7PPPcBPTrD/KWA3YM+qeqqqvlpTLzz03qp6vKp+MMnxS6rqn6rqceAPgLeke8N1C/0y8MGqWldVjwHvBo4e96rhD6vqB1V1M3AzvZB6mq6WtwLvrqpHq+oO4M+A47akuCQB3g78dlU9WFWP0vuDdXTX5FLgyCQ7dNv/qdsH8FlgaZKl3fZx9P7QPbmJU97fveJ6eKpRc/cz/yLwnqr6flWtofcHZbz3VdXDVXUXcA29P1KTeQpYlmTnqnqo+yOlITPcn30WAg9OsP8DwFrgy0nWJTl9gL7unsbxO4HnAvMHqnLTdu/66+97Hr1XHGP6r275Pr3R/XjzgW0n6GvhFta3ANgBuGEsdIEvdfupqrXAbcCbu4A/ki7cq+oJ4Arg2PTe/D4GuGSK882vql27258OUNs8nv67mej3OMjzN+YXgTcCdyb530leO0UN2goM92eRJD9NL7iecbVDN3I9rapeBLwZODXJwWOHJ+lyqpH94r77e9Ab4d1Pb0pgbNQ6NppcMI1+76H3Zmd/3xuBe6d43Hj3dzWN7+vb0+xnon5/APy7vtDdpar6A3JsauYoYE0X+GMupvfq5GDg+1V13RbW028DvedqUd++xZO0ncgzfjdVtaqqjgKeD/wtvT9OGjLD/Vkgyc7dG3iXA5+oqm9O0OaIJHt3UwqPAD/sbtALzYGukR7n2CTLutHp2cCV3aWS3wK2T/KmJM8FzgS263vcvcCS9F22Oc5lwG8n2SvJjvx4jn5aV4x0tVwB/NckOyXZEzgV+MSmH/l0Sbbvv9ELwL8CPpTk+V2bhUn635u4HDgU+M/8eEpmrK7rgH+jN0U01ah9Wrqf+dPAe5PskORl9N5nGNS9wKIk2wIk2TbJLyfZpaqe4sf/dzRkhnvbPpfkUXovu88APsjkl0EuBb4CPAZcB3ykqq7tjv0JcOYgc7rjXAJcRO8l/vbAO6F39Q7wG8AF9EbJj9N7M3fMp7p/H0gy0fztx7q+/x74F+BfgVMmaDeIU7rzr6P3iubSrv9BLaQ3Su+/vRj4L/Smua5P8gi95/alYw+qqu/Qe57/A/DJCfr9OPDvmeYfmgGdTO9N5O/Sex4vA54Y8LFXA7cC301yf7fvOOCO7ud8B31vCGt44pd1SHNPkl8BTqqqn90K5zoHeGFVbfVPAGv2OHKX5phuGus3gPNnqf+XJXlFd+36fsCJwGdm41waHsNdmkO6efkN9Oa2L52i+ebaid68++P03nP4M3qXYKohTstIUoMcuUtSg4a2cNj8+fNryZIlwzq9JI2kG2644f6qWjBVu6GF+5IlS1i9evWwTi9JIynJnVO3clpGkppkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaNLRPqD6bLDn9C8MuYWB3vO9Nwy5B0gxw5C5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGjRQuCc5LMntSdYmOX2C43skuSbJTUluSfLGmS9VkjSoKcM9yTbAucDhwDLgmCTLxjU7E7iiqvYFjgY+MtOFSpIGN8jIfT9gbVWtq6ongcuBo8a1KWDn7v4uwD0zV6IkaboG+SamhcDdfdvrgf3HtXkv8OUkpwDPAw6ZkeokSZtlkJF7JthX47aPAS6qqkXAG4FLkjyj7yQnJVmdZPWGDRumX60kaSCDhPt6YHHf9iKeOe1yInAFQFVdB2wPzB/fUVWdX1XLq2r5ggULNq9iSdKUBgn3VcDSJHsl2ZbeG6YrxrW5CzgYIMnL6YW7Q3NJGpIpw72qNgInA1cBt9G7KubWJGcnObJrdhrw9iQ3A5cBJ1TV+KkbSdJWMsgbqlTVSmDluH1n9d1fAxwws6VJkjaXn1CVpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0aKNyTHJbk9iRrk5w+SZu3JFmT5NYkl85smZKk6Zg3VYMk2wDnAj8PrAdWJVlRVWv62iwF3g0cUFUPJXn+bBUsSZraICP3/YC1VbWuqp4ELgeOGtfm7cC5VfUQQFXdN7NlSpKmY5BwXwjc3be9vtvX7yXAS5L8Y5Lrkxw2UwVKkqZvymkZIBPsqwn6WQocBCwCvppkn6p6+GkdJScBJwHsscce0y5WkjSYQUbu64HFfduLgHsmaPPZqnqqqv4FuJ1e2D9NVZ1fVcuravmCBQs2t2ZJ0hQGCfdVwNIkeyXZFjgaWDGuzd8CrwdIMp/eNM26mSxUkjS4KcO9qjYCJwNXAbcBV1TVrUnOTnJk1+wq4IEka4BrgN+tqgdmq2hJ0qYNMudOVa0EVo7bd1bf/QJO7W6SpCHzE6qS1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1aKBwT3JYktuTrE1y+iba/VKSSrJ85kqUJE3XlOGeZBvgXOBwYBlwTJJlE7TbCXgn8LWZLlKSND2DjNz3A9ZW1bqqehK4HDhqgnZ/BLwf+NcZrE+StBkGCfeFwN192+u7fT+SZF9gcVV9flMdJTkpyeokqzds2DDtYiVJgxkk3DPBvvrRweQ5wIeA06bqqKrOr6rlVbV8wYIFg1cpSZqWQcJ9PbC4b3sRcE/f9k7APsC1Se4AfgZY4ZuqkjQ8g4T7KmBpkr2SbAscDawYO1hV36uq+VW1pKqWANcDR1bV6lmpWJI0pSnDvao2AicDVwG3AVdU1a1Jzk5y5GwXKEmavnmDNKqqlcDKcfvOmqTtQVteliRpS/gJVUlqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUoIHCPclhSW5PsjbJ6RMcPzXJmiS3JPlfSfac+VIlSYOaMtyTbAOcCxwOLAOOSbJsXLObgOVV9QrgSuD9M12oJGlwg4zc9wPWVtW6qnoSuBw4qr9BVV1TVd/vNq8HFs1smZKk6Rgk3BcCd/dtr+/2TeZE4IsTHUhyUpLVSVZv2LBh8ColSdMySLhngn01YcPkWGA58IGJjlfV+VW1vKqWL1iwYPAqJUnTMm+ANuuBxX3bi4B7xjdKcghwBnBgVT0xM+VJkjbHICP3VcDSJHsl2RY4GljR3yDJvsBHgSOr6r6ZL1OSNB1ThntVbQROBq4CbgOuqKpbk5yd5Miu2QeAHYFPJflGkhWTdCdJ2goGmZahqlYCK8ftO6vv/iEzXJckaQv4CVVJapDhLkkNMtwlqUGGuyQ1yHCXpAYZ7pLUIMNdkhpkuEtSgwx3SWqQ4S5JDTLcJalBhrskNchwl6QGGe6S1CDDXZIaZLhLUoMMd0lqkOEuSQ0y3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KD5g27AM0tS07/wrBLmJY73vemYZcgzUmO3CWpQYa7JDXIcJekBhnuktQgw12SGmS4S1KDDHdJapDhLkkNMtwlqUF+QlXaSvz0r7YmR+6S1CBH7hppozYalrYWR+6S1KCBwj3JYUluT7I2yekTHN8uySe7419LsmSmC5UkDW7KcE+yDXAucDiwDDgmybJxzU4EHqqqvYEPAefMdKGSpMENMnLfD1hbVeuq6kngcuCocW2OAi7u7l8JHJwkM1emJGk6BnlDdSFwd9/2emD/ydpU1cYk3wN+Cri/v1GSk4CTus3Hkty+OUUD88f3PceNUr2jVCuMVr2jVCs5Z6TqHaVaYcvq3XOQRoOE+0Qj8NqMNlTV+cD5A5xz0wUlq6tq+Zb2s7WMUr2jVCuMVr2jVCuMVr2jVCtsnXoHmZZZDyzu214E3DNZmyTzgF2AB2eiQEnS9A0S7quApUn2SrItcDSwYlybFcDx3f1fAq6uqmeM3CVJW8eU0zLdHPrJwFXANsDHqurWJGcDq6tqBXAhcEmStfRG7EfPZtHMwNTOVjZK9Y5SrTBa9Y5SrTBa9Y5SrbAV6o0DbElqj59QlaQGGe6S1KCRC/eplkKYS5J8LMl9Sf5p2LVMJcniJNckuS3JrUl+a9g1TSbJ9km+nuTmrtY/HHZNg0iyTZKbknx+2LVsSpI7knwzyTeSrB52PVNJsmuSK5P8c/f/97XDrmkiSV7aPadjt0eSvGvWzjdKc+7dUgjfAn6e3uWXq4BjqmrNUAubRJLXAY8BH6+qfYZdz6Yk2Q3YrapuTLITcAPwC3Pxue0+/fy8qnosyXOBfwB+q6quH3Jpm5TkVGA5sHNVHTHseiaT5A5geVWNxIeCklwMfLWqLuiu6Nuhqh4edl2b0mXZt4H9q+rO2TjHqI3cB1kKYc6oqr9nRK73r6rvVNWN3f1HgdvoffJ4zqmex7rN53a3OT1KSbIIeBNwwbBraUmSnYHX0btij6p6cq4He+dg4P/NVrDD6IX7REshzMkAGmXdqp77Al8bbiWT66Y4vgHcB/xdVc3ZWjv/Hfg94N+GXcgACvhykhu6JUPmshcBG4D/2U15XZDkecMuagBHA5fN5glGLdwHWuZAmy/JjsDfAO+qqkeGXc9kquqHVfUqep+Y3i/JnJ32SnIEcF9V3TDsWgZ0QFW9mt5KsL/ZTS/OVfOAVwP/o6r2BR4H5vp7cdsCRwKfms3zjFq4D7IUgjZTN3/9N8BfV9Wnh13PILqX4NcChw25lE05ADiym8u+HPi5JJ8YbkmTq6p7un/vAz5Dbzp0rloPrO975XYlvbCfyw4Hbqyqe2fzJKMW7oMshaDN0L1JeSFwW1V9cNj1bEqSBUl27e7/BHAI8M/DrWpyVfXuqlpUVUvo/Z+9uqqOHXJZE0ryvO4NdbrpjUOBOXu1V1V9F7g7yUu7XQcDc+4igHGOYZanZGDEvkN1sqUQhlzWpJJcBhwEzE+yHnhPVV043KomdQBwHPDNbi4b4PerauUQa5rMbsDF3RUHzwGuqKo5fXnhCHkB8Jnu6xjmAZdW1ZeGW9KUTgH+uhvwrQPeNuR6JpVkB3pX+/36rJ9rlC6FlCQNZtSmZSRJAzDcJalBhrskNchwl6QGGe6S1CDDXSMryRndqpC3dKvs7d/tf1d3ydlMnOMFST7frUC5JsnKbv/uSa6ciXNIs8FLITWSumVdPwgcVFVPJJkPbFtV98zkqoZJPgqsqao/77ZfUVW3bGm/0mxz5K5RtRtwf1U9AVBV93fB/k5gd+CaJNcAJDk0yXVJbkzyqW79nLF1y8/p1ob/epK9JznP+rGNsWBPsmRsnf5usaqxNbo3JHlPt/93k6zqXlmMxJrzaofhrlH1ZWBxkm8l+UiSAwGq6i/orTf0+qp6fTeiPxM4pFsMazVwal8/j1TVfsCH6a3cON65wIXdF5mckWT38Q2q6te6RcyOAh4ALkpyKLCU3rosrwJeM8cX4FJjDHeNpG4999cAJ9Fb8vWTSU6YoOnPAMuAf+yWVTge2LPv+GV9/z7jG3yq6ip6y8r+FfAy4KYkC8a3S7I9vVX+Tu7W6D60u90E3Ng9dum0f1BpM43U2jJSv6r6Ib0VIa9N8k16wX3RuGaht977MZN1M8n9/vM8CFwKXNp9Rd7r6H1TVb/zgE9X1Vf6zvsnVfXRwX4aaWY5ctdI6r6Psn8k/Cpg7FttHgV26u5fDxwwNp+eZIckL+l73Fv7/r1ugvP83NiVN91qiS8G7hrX5jeBnarqfX27rwJ+tW9+f2GS50//J5U2jyN3jaodgb/slv7dCKylN0UDcD7wxSTf6ebdTwAuS7Jdd/xMet/FC7Bdkq/RG+hMNLp/DfDhJBu7NhdU1aru26rG/A7wVN9qmudV1XlJXg5c162w+BhwLL1vjpJmnZdC6llr1L4IWpoOp2UkqUGO3CWpQY7cJalBhrskNchwl6QGGe6S1CDDXZIa9P8BODwwyxUznSAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "#create a plot showing distribution of Levy flights\n",
    "li = []\n",
    "for i in range(100):\n",
    "    li.append(levy(random_num()))\n",
    "plt.hist(li,range(8),density=True)\n",
    "plt.title(\"Distribution of Levy Flights\")\n",
    "plt.xlabel(\"Step Size\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Applying Cuckoo Search to the Traveling Salesman Problem \n",
    "\n",
    "Cuckoo search can be used to find an optimal tour to take in the following way:\n",
    "\n",
    "**Eggs:** Each egg represents an individual city in the set of cities\n",
    "\n",
    "**Movement:** Each city has a set position so all that we can change is the order in which we visit the cities\n",
    "\n",
    "CS introduces perturbations to move about the search space and change the solution from the original solution. 2 types of perturbations are used in the CS application to the TSP:\n",
    "\n",
    "- 2-opt moves: this is where 2 edges connecting are removed and 2 new edges are added. This is done such that edged (a,b),(c,d) become (a,c),(b,d).\n",
    "- Double bridge moves: this is where 4 edges are removed and 4 edges are added. This is done such that edged (a,b),(c,d),(e,f),(g,h) become (a,f),(c,h),(e,b),(g,d) (Ouaarab et al., 2013).\n",
    "\n",
    "The diagram below demonstrates how the 2-opt changes are made ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "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ICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KMRryIAAAABxpRE9UAAAAAgAAAAAAAADMAAAAKAAAAMwAAADMAABXs5xbrXsAAEAASURBVHgB7J0HeBRV18dPSDah2cXeFRvYu2IHLFh47ag0BaQaeu+9ExCpForl9bU37IoNFbtiV8QOon6KimY3hO/8ZyDcuZtAypaZnf95HmVms5m587uTOXPuaVnrVYRCAiRAAiRAAiRAAiRAAiRAAiRAAj4jkEWD1WczwuGQAAmQAAmQAAmQAAmQAAmQAAk4BGiw8kYgARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABivvARIgARIgARIgARIgARIgARIgAV8SoMHqy2nhoEiABEiABEiABEiABEiABEiABGiw8h4gARIgARIgARIgARIgARIgARLwJQEarL6cFg6KBEiABEiABEiABEiABEiABEiABquP7oE777xTCgsLnRFdeeWVUqtWLR+NjkMJE4EVK1bI888/X+Yl165dW+rXry8HHnig5OTklPk9/oAESIAEwkqAOj2sM++/66ZO99+ccEQVI0CDtWK8kvbt999/X4488siS48+fP19atGhRss8NEkglgdtvv12uu+66LZ6yRo0aMnXqVGnbtu0Wv8svkAAJkEBYCFCnh2Wmg3Gd1OnBmCeOsmwCNFjLZpPSn3Tr1k0KCgpKztmwYUN55plnSva5QQKpJGAqt7p160r16tVLTv/bb7/Jjz/+KOvXry/5bOzYsdKnT5+SfW6QAAmQQJgJUKeHefb9d+3U6f6bE46oYgRosFaMV1K+HYvFZPfdd5fVq1eXHL9atWry7bffOp+XfMgNEkgRAVO5LVu2TOrVq+c589q1a+WRRx6RNm3ayN9//y0waj///HPPd7hDAiRAAmEkQJ0exln39zVTp/t7fji6chBQLwklzQQefPBBuKqc/wYMGFCyPX78+DSPjKcPK4Hbbrut5D5Ug7VMDD169Cj53qefflrm9/gDEiABEggLAer0sMx0cK6TOj04c8WRlk6AHtZyGPXJ/krTpk3l4Ycflr333lu++OIL2WOPPeTnn3+Www47TD744INkn57HJ4E4Altajd34C8hf7dq1q7O7dOlSOe644zb+iP+SAAmQQCgJUKeHctp9fdHU6b6eHg6uHARosJYDUjK/AsMUBipCiNS7KiNHjpROnTrJjBkznNO+9957csQRRyRzCDw2CcQRKI9yKy4uliZNmsiTTz7p5LjiXt5qq63ijsUPSIAESCAsBKjTwzLTwbpO6vRgzRdHG0+ABms8k5R+gkJLKM4A0ZBKOeigg+Tll1+W0047zflMQy5l4sSJzjb/RwKpImAqt4ceekgOPvjgklOj6NKHH34o+PyJJ55wPh82bJgMHjy45DvcIAESIIEwEqBOD+Os+/+aqdP9P0cc4eYJ0GDdPJ+k/xTeU4T9Hn/88fLGG28459Pobdlrr73k+++/l1133dX5F0WYKCSQKgKmctvSOdH+5tZbb93S1/hzEiABEsh4AtTpGT/FgbxA6vRAThsHbRCgwWrASPXmu+++K0cffbRz2ptuukk6d+5cMgR4VidPnuzsP/3009KoUaOSn3GDBJJNoCLKLSsrS1q3bi2zZs2SSCSS7KHx+CRAAiTgSwLU6b6cFg5KCVCn8zYIOgEarGmcwfz8fJk2bZozgvnz50udOnVKRvPmm2/KkCFDnP3mzZvLggULSn7GDRJINgFTudltbZBvvXz5cvn4449l4MCBzr8Yz9ChQ0vu2WSPj8cnARIgAb8RoE7324xwPBsJUKdvJMF/g0qABmuaZi4ajcpuu+0mv/766xZHUKtWLVm1apXgXwoJpILA5pSbeX70YD3kkEPku+++c3oGI4ydQgIkQAJhI0CdHrYZD9b1UqcHa7442ngCNFjjmaTkkwceeEAuvfRS51zIU83NzY0777///usYqvjBwoUL5dprr437Dj8ggWQQKK9yw7lbtmxZEgGwZs0aVgpOxoTwmCRAAr4mQJ3u6+kJ/eCo00N/CwQeAA3WNE3hRRddJI8++qjUrl3bMUpr1qwZN5KVK1c6Xiu0D2ncuLE89dRTcd/hBySQDAIVUW4NGjSQV199VbKzs2Xt2rWlLr4kY4w8JgmQAAn4hQB1ul9mguMojQB1emlU+FmQCNBgTcNsIbwXvVeLiooc79S8efPKHMVZZ50lL7zwgmMMIOwS3lgKCSSbQHmV29tvv+1UuMaiCqpjom8whQRIgATCRIA6PUyzHcxrpU4P5rxx1JsI0GDdxCJlW5MmTZKePXs653vmmWekYcOGZZ579uzZ0r59e+fn6MeK6sEUEkg2AVO54R6sW7duySnRdunHH38UVMS8+eabpbCw0PnZvffeK5dddlnJ97hBAiRAAmEgQJ0ehlkO9jVSpwd7/jh6ERqsabgLDjvsMEHlVRRdgtd0cz1WV69e7XhV161bRw9WGuYqrKc0lduWGOTl5cmUKVOkQ4cOW/oqf04CJEACGUeAOj3jpjTjLog6PeOmNHQXRIM1xVP+0UcfSf369Z2zwss6YcKELY4A+avwxEK++OILOeCAA7b4O/wCCVSFANoooZhSWbLttts693G9evXkhhtukKOOOqqsr/JzEiABEshYAtTpGTu1GXVh1OkZNZ2hvBgarKGcdl40CZAACZAACZAACZAACZAACfifAA1W/88RR0gCJEACJEACJEACJEACJEACoSRAgzWU086LJgESIAESIAESIAESIAESIAH/E6DB6v854ghJgARIgARIgARIgARIgARIIJQEaLCGctpLv+jhU2JScEuRRLJFcnI2/RfJySrZN3/m+RzfL/m9LIl4fn/DsbK9n+Mc7vf0+Pq78b+z4bxxPzPGY5zXHE/JsZ0xbTpvVlbp185PSYAESIAESIAESIAESIAE/EeABqv/5iRtI+ozKibjZ8TSdv5knzjbY/iqEesYs6Zhjm3XGHaM5w0/Nw3hEqN6cz/TY2z22MZ5Swz2DQb+xt+L+9xcAFDDf+OCQsl4HONfP99w7GrVkk3TPf7HnxfLo8+ukzNOypYTjkrRSVNzaTwLCZAACZAACYSKwJcr1ssDi4rkxKOz5bQTqdNDNfk+v1garD6foFQOr/uwqEyZU5TKU/JcSSCQrTpmo0ELA7zEqFVj1jSESz53jN0NxnrJd9xj7LJTlswck1vqKOf9r0huuatIXn2zWFpfmSNzxuc65y31y/yQBEiABEiABEjAtwTuenCdo9NfWLJOrro429HpW9VmWJpvJyxkA6PBGrIJ39zl3jgoKjfdRoN1c4zC9rP99sqSr16r4bns739cL2Omx2SuGqsxwyE/Qw3bDi3U+qWQAAmQAAn4jsDbHxRL8XqR446g58x3k5OGAb3zYbFss3WW1K4pMnaDTv977aaBTBqSK93bUadvIsKtdBKgwZpO+j47d8d+UZm5gAarz6YlrcM5cL9q8tnL1T1j+OyrYrm2S1Teer/Y8/nRh1VzVmSPOZwvQx4w3CEBEiCBNBL4519xPGe33l0kdXbIkrkTcmWfPek5S+OUpP3UK75bLy27RqVYVzCanJ0tj2lqD6KlTDmkrqvTGxxPnW5y4XZ6CNBgTQ/3tJ11+bfrpabaHwj1tAUra3+tXS9FarPiv5jzr7vvbK9zP3d/Zn9Pf6Y/jxWV8jmOs279huOZx8b2hs89x3Y/LxnDhp+Z4yn5mXPsss6rxzaOa18v97dMoN6B1WTZC16DFb81+44iad8nGneAG5rnyKyxpYcQx32ZH5AACZAACVSJwDc/rBekgeyxa7xOx4EXLymWW9RQvfMBVZYbZMCNERnZJ7Jxl/+GkMCwyTEZOmlTiBRqULyzrNgTNQUsLS7Pkbma7pNLtR7Cu8Rfl0yD1V/zkdTRrFy9XroMjDoPpE6tcqTRaZqwGBJxjd0tG8Il33OM703f9xjIqvdjaoDjM/tzxwA3jOSS4200zDcY2Jt+z1gQ2Hg85/dL+dz53dLPW7JQoL+7XkO+EiVHHFpN3nsm3mAt1oXYdr2jghV7U/DiNEdX76+7imFEJhdukwAJkECiCfyxBjo9Jqt/Wy+dW+c4njLzHPCs9hwelRnzvc/pneu4XtYLG4XnHcDkEvbtV5YWq3e1UJZ/431ZqHdQNfnoM6+XFaymj8oVvDNSSCCdBGiwppN+is89cHxMRk11V9QO2r+adLkuhw+hFM9Bsk8HL/cmQ3qTcet6vzf+rBRv9wYDfJOB7XrYt64tcu6Zpb/UvP5OsbTrFZUPP/UquBOPqeasyNY/mGFEyZ5vHp8ESCC8BEZNi8nAca5O31frDXRuHZHOaliY3rBFz6+Ttj2j8uMqr3FyUeNsJzR4px1L98yGl2rmXzkWm+feaS1i6H0wuEdE5msxxaXvenX6EfVcnX7ckdTpmX93+PcKabD6d24SOrI77i9yVmJ/1xVZUyYPdQvlVM8zP+U2CZSPAIp0oViXLTdenyNThzOGyObCfRIgARJIBIH7Hl/nREyt/Nmr00f2jki3dhGpadTKGzIxJuizbsuovhHp34WhwTaXTN7/78PrpJV6Vwsttd2rQ0TGD4w4uc5tdSHalrbXuJ0A7M+5TwKpIkCDNVWk03ieN98rdhTbG9aq2Y7bZ8lNI3Od8uVpHB5PHWACCDnDai0WREypoS9LyHu55hKGEZlcuE0CJEACVSWAqBak97z4mtcTVkurvUKno82YKd9pZXcYIU8t1hAcQ+CVRQGmsxuUHkVjfJWbGUBg9a9uoaUn1OtuCgomzi/IlY1RUaV5YPF93CttrvbeW+ZxuE0CySRAgzWZdH1w7DV/ujkuC+7zGhQY2lAN/xjSnaurPpimQA/hpdeL9WWoUD5f7l3pP/0kVBjMkwP3Y8hZoCeYgycBEvANAbQSg7GKwne29OkUkbH9S9fp9z2mocFqtNpRVs0u1qI6E3MFxi4lswlMmh3TnOZ4T3uBRkPla1TURoGTA/fK+x97F0SO18JM6LeO2hYUEkg1ARqsqSae4vONvikmA8bGP6CaNc3RldiI7LAdjYkUT0lGnm7irJj0GhF/n20MM8rIi+ZFkQAJkECKCUyZUyTdh8WHbDY9N9vxrpZVLRjDxDMaz2pbCoapwdJmk8Fi/5z7wSfwrlYAbqVtbD74xGuEIpd5nnpXt9vG+y5487wi6Twg/j5DcS948SkkkGoCNFhTTTyF57t/kZvj8pNVbOGo+tWcB84px3GVLIXTkdGnQrVKrMjeq6v4pmyrShChwZddwJAzkwu3SYAESKCiBFBACd5Vu7rrwQdUk+m6AH32qZt/zn76pes5Q5VYU+prdVh4WU88mu8EJpdM2u42NCoFc71e+Vo1s5xQ4EubxN83UbVV22q6z4J7vb+Tp7YqQoObX8YFjky6P4JwLTRYgzBLlRgjSpOj3P0LS7wGBAoxYHWMbUcqAZW/slkCz7y0zqkavOJ7b2hw49OznTCivffwruBu9mD8IQmQAAmQQAmBr7QFCYxVO/8wSx+r0OnlbTsyXw0QLC4itNiU65tpaLAaIjgeJbMIPPbsOmmZH5Xffvfq5g4tcmTGmLK9pVjYQCeAT3Shw5RTT3BDg7FQQiGBVBGgwZoq0ik8D9qaQLHNWuhdGcMQeneMyLgBpee4pHCIPFWGEjDbLJiXODA/IiO0eiWFBEiABEig4gRK85DhKGhPN21E2UZHaWfq2C8qMxfEvx8gPxHVYCmZQ+Cff8TpuWpHP6G1IUKBt+RVn6wh6D1KCUHvcUOOTBxcsfsuc6jyStJBgAZrOqgn+ZwI+4Bys+Xic9wclz134xKqzYb7iSHw8y9uaPAjT3s9+2hUj5ch5MtQSIAESIAEyk9gti4+d9ZFaCxGm4LoFXhXK1rY7p0P3dBg/GsKiurAy3r4IfScmVyCvA3HRYe+8e+Do/poS6Mbt7yI/Odf651OAGiHY8rWW7k6/cqLqNNNLtxOHgEarMljm5YjP/GCm+Py1Qpv6AdCN1BkqeEWclzSMmieNKMIIPwIYUQ/Wf0BL2zkhgbvshMXTDJqwnkxJEACSSOwWNN6kN6zTNN8TEGKBYxVPFcrI/CwwtNqS2U8tvYxuO8PAl98rW1s8gvltbe9985Zp2TL/Km5srkCXeYVPPeKq9OXf+t9r8T7JBai0R6JQgLJJkCDNdmEU3h8PEwQCrzoOe9KGIYAxYbqbhQSSAWBwdqofkQpjeqH94rIoK5bXtVNxRh5DhIgARLwMwEs+nXRSq0ooGjLhIER6dmh8s9S5LAilxU5rabUqK5FdbQA0zX/4fuCySWI24PGx2TkVCtZWS8EocAtL6/Y/I6ZHpP+Y+KP1a9LREb3rfx9GESuHHN6CNBgTQ/3pJwVeQbIN7CFZchtItxPNgE0qoeX9UmrUf1eu7thROecUTmvQLLHzeOTAAmQgF8IDBgXk9HT4o0EFEjCIjSMy6oIiurAaEX1YFPOODlbbtHQ4P33oefM5BKkbRTcRBubb3/wekVbaHXfeepdrejM/vKbGxr84BPexZM6O7g6HW2VKCSQTAI0WJNJN4XHnqNNxOFdjVq6rdFpyHGJCBLsKSSQSgLwCsBotSsTooQ+Wt1st21FVWYqR89zkQAJkED6CCy4Dzo9Jmv+9BocDY5329IdWS8xOn3SrCLpOSI+NLhvp4iM6U/PWfrugKqduXW3qMz7n9eBsfsu2sZGjdWzG1TOuERbJej0H1Z678nzz3Z1+m56fAoJJIsADdZkkU3hcV98DS1sovLhp95VUnizsArLQjcpnAyeykOg7+iYjLvZWkXRb6BSNSpWU0iABEiABLwElr7r6vSl73l1OrxZ0OmJLHTz+4Ye2vdZPbR33F57aKuXlZ4z79wEYe+O+4u0MnBUir23jyQifHfY5JgMnRSv04f2iMiQ7tTpQbg/gjpGGqxBnbkN41652s1btZUNfjxec1x6VSHHJeBoOHwfEPhSi39hRdbuB3zAvvoyND5Pzjg5MV4CH1wqh0ACJEACVSbwhxqQ8KwuVKPDlmE9IzK4W+KNgqc0dQOhwUjlMKUJPGdqtO66Mz1nJhc/b/+4ar0TCoy+6KacoBWgkbta1d6p8K626x1fKwUFnFCA6byzKue9NcfKbRIojQAN1tKoBOizgZpUP6qUpPrrrsqR6chxqRGgi+FQM5LA3Q+5L0N/r/W+DF2tRT3m6MtQLd6jGTnvvCgSIIGKEyirl/XVTZG3GpHtt0uO8Thci+QN0WJ5trBQnk3E3/tjtThSv1KKI908Olc6tqxYoaWyrvShJ12djrxWU/5znls1GN55CgkkmgAN1kQTTeHxEPbRWVdisSJryinHuTkuR9Wn98rkwu30ESir6X3BsFzJb5MYJZq+q+OZSYAESKDqBO573G1Lt9JqCXb0Ya5OP/nY5Ol0eOba9lTPmeYpmoLUInhZ0fOV4m8Cb2oIOUKBP/nCGwt8yfnaxqYgT2rXStz4+4+NyZib4hc4xvSLSN/OiY8CSNzIeaSgEqDBGtCZw4MJeatvaK6LKVjZQo7LVRdTuZhcuJ1eAh99XuyEBi95y3u/1jtIG9VrGNFJSXwRS++V8+wkQAIksGUCqEGBUOAXX/MajLVqum3pWl+Z/IU9VIBFaPCv/+ddBL/8Qjc0eJut6Dnb8kym7xt4J5x+uzeUfNuts5xQ4IvPSew74dfaRhH3Cnq0mrLf3kj3yZWzKlnYyTwWt0nAJECD1aQRkG1UDYRiQxVBW5j4bhPhvl8IoGIhFFyRddviRQyhwTmJ1ad+uWyOgwRIgAQ2SwA9UWFszNZq/7b00Wq9Y1NYrbesQnkTB0ekxw30nNnz45f9BzVMt1V+VNb85V1suPH6HJk6PDcpw7znEbdqsH1OOEyg07eqxQWOpIAP6UFpsAZw4kdrGMYADcewpdmGHJcdkpTjYp+P+yRQUQId+0Vl5oL4l7KZY3KlfYvkexAqOl5+nwRIgASSTWCK9k/vrn3UbUGFXkRMoaBNquTLr13P2WLL04tiPbdMzBWkHFH8RQBODIQCI7fUFEQwzddCS8ccnrw56zE8KpNnx+v0yUNypVs76nRzPrhdNQI0WKvGL+W/jd6WWIn9SfNNTEG+KoosnUxlYmLhts8IvLvMDQ1+6wNvaDBytFBhMJmK1WcoOBwSIAEScHJGuwyIynINsTTlEDUQbxoVqXTPTPNYFd2+4wE3Gubff72/2eqKHCefNYd2iBdMmvcQBoz3QltS0T7u0y9dnf7yUq9OP6Suq9PRN5hCAokgQIM1ERRTdIyPPit2iiwtXuJdRaupVVaxCovKwBQS8DsBhL217xOvXNs3z5GZY5MTuuR3JhwfCZBA+Ah89Y3blu4Jq9BRljpUodM7tUqfTi8tHxIzxGgYf92nH2uBJYQCv/m+12A854xsJ3d1lzrJ984jPQ3t6wottd7ycjfdJ5eR5P66aQI6GhqsAZk45P1BgcxaGB960btjRLCSRiGBIBBAM3Pkst72X++9nK05rPCycuElCLPIMZIACVSVQFnV07tclyPTRqR38e79j4ud5zQKPJqCKBhUDWYXApNK+rZLyzmGBxyhwGgdlyrprFECN8/z6nSce/qo9C68pOr6eZ7kE6DBmnzGCTlDwdwigXKzBZXfsBK7527JX0Wzz819EqgsgdffccOIUBnTlJOO0TAifRmqr7k3FBIgARLIVAKzdfG5sy5C20Xo0D4GOv3A/dKv0+doNMwNpUTDoJ8n+npS0kvgmZfWSUv1rv5ktUHCou+tk1I7P1jggJd1qbXAcWQ9NzT4uCOp09N7twT/7DRYAzCHT7zg5q1+tcKb44IiCGgk3vBUllcNwDRyiBaBabcVSf6g+EWYZFY1tIbAXRIgARJIOYHFS9y2dMs0zceUvfdw29Jd2MgfOr2saBiEeM7VAkwtLkudB8/kxG2RdXrrIBQY+cam7KP30LypeXL6iak3EOfe5YYGm+PBdttrNDRYo6coJFAVAjRYq0IvBb+LQgwIBV70nDdvFafGKmzn1lQYKZgGniIJBP7Rgh5YkbUVLnKyodyuuYT3dhKw85AkQAJpJABvGIosoYCiLRMGRaRne3+l97z2toYG94wKemmbcuoJbmjwQfun3jAyxxHW7dvvKZLruscv+A7uFpFhPdN3D0Gnw3A1BTnZ0OltrqZON7lwu2IEaLBWjFfKv91jWEwmz4lvYQNDFQYrhQSCTODF1xFGVCifL/dGD5xxktvHre6+6Q+LCzJfjp0ESMBfBAaMi8noafE6/fpmOU6l/+rV/TVejKaslKSeHSIyYWD6jCP/kUrNiL79wW1jYxfgRMuh+epd3X/v9OlNhATDaEWIsCknHOWGBh9+KBc4TC7cLj8BGqzlZ5XybyJ/BN7VqKXbGp2GHJeIcGUz5VPCEyaBwMRZMek1wrrJ9Ty99GVoPF+GkkCchyQBEkgHAVRT7TIwJuibaQpaf2ABGvl+fpS//kahvEL578Ner/B222Q5BZgubeKPEGY/skvGmEYWxGTQhHidOVu9mO00/DbdguJLKMJkCx0tNhHuV4QADdaK0Erhd198zc1xsYvS7LW7m+NyUWMqiBROB0+VRAK/r1nvrMje+1j8yxDCiC67gPd6EvHz0CRAAikgsPRdV6fbRWnq7ODq9Csv8vdz7tmX1zlVg1d85zW2z9X2Kchn3WPX9Hn1UjB9vjnFkre0jU3XqHzxtdeDiftnfkGe5OWlf6hobwMvKxZoTMHY5qpOb87cZxMLt8tJgAZrOUGl8msrV7s5Lvc97n2BxxjgcYLniUICmUQA1Q7R6uab770vQ6iYiRYKWKihkAAJkEAQCfyhi3LwrC683/sCj2tBviHyDoMgozSUeaCGNNsypHtEhvYIxjXYYw/afvu+UUGFaVN23D7LaWNz/tn+WfR4ZanbFunTL72GNXOfzZnjdkUI0GCtCK0UfXfg+JiMmhqvFFCqHD2tavgwxyVFaHiaDCaAex73vi0D8yMyojdfhmwu3CcBEggGgbKebeiTifSe7bcNxoLcql/WOwWYHn3Gu5i++y5uaPB5Z/nHYArGnVGxUd77qLax6VooKFhoSvcbcmTSYP/VNJk8p0h6DIsPDe5xQ0QmDqZON+eQ21smQIN1y4xS+o07dAW2s67EYkXWFCTTI8eFzbpNKtzOJAI/42VIvayPPO19Gdq5jvsy5JdWD5nEnNdCAiSQXAKIlEItipVWr8yjD6vmFFk66Vh/5q2WRQXPZzyn8bw25ZLz3WiYoBjf5tiDsP3r/613QoEfe9arH5H3PK8gV47wYTGjP/9ydfo9j3jHvPVWqtM1NPgKn4fBB+G+CNMYabD6aLbf1OpqUGxvaK6LKQj3gLF61cVcvTS5cDvzCEAZI/fFboQOY3WOhgbvosYrhQRIgASCQAA1KKDTUZPClFo13bZ0ra9Mf4Ecc1zl3R4wVisd3xQfDTNuQER6d6TnrLwcK/K9KXOLpPvQeG/l5CG50q2df++j515xdTpaNJrS8FRXp++7J3W6yYXbZROgwVo2m5T+BFUDkeNiJ6ljEMgNQY4IhQTCQGCwVj8coVUQbRnRKyIDu/LvwObCfRIgAf8RiOkjrLMaq6j2b0ufThEZ2z+4z7Kv1fiAlxXGiCloQzZ3Yp6cfmKwvMbmNfhx+4NPiqVlflTe+8i78NGkIQot5coO2/nb6Bujixv9dZHDlv5dIjKqb3D/Duzr4X5yCdBgTS7fch8dq5VYtbSlWVM3x8XvDyR73NwngcoS+O5H92XoqcXelyEUXoKX9RwtxEQhARIgAT8TmKL5e91Lyd9rei7a0gW/qi5a3MBo/etvr+fs2ktznEJ51X1QrdbP90dFxtZzeEwmzfa+H6KWyTytCnzFhf7Xh7/85nYCePBJr05HhWx0AsDfBIUEtkSABuuWCKXg5/cvcnNcflrlffAjX3W6KraTNX+VQgJhIoC/CYQG//a792/iMu33B6MV/f8oJEACJOBHAouec3W6HQZ5SF3UoojI2Q0y4wW925CoFNwS70FGcchOrfwbpurHe6asMS16fp20Uu/qajX6TLnh2hyZNc5/hZbMMZrbuA7o9B9Weq+jiVY2hk7fbWfqdJMXt+MJ0GCNZ5LSTz76rNgpsrR4iXflqWYNN8cFlYEpJBBGAn1GxWT8DO+qMjgwTyqMdwOvmQSCQeCrb5DeE5Un9AXdlCx9H8cCdMcMMuSW6fsLvKyvv+0NVUUhILQjO/YILrab90BFt9HPtGV+odhFiw7Q0Gv0XD05YAW7hk2OydBJ8TqdaW8VvTPC+X0arGmc9yJdmIRim2X11MKQULgAL+YUEggrgS9XuGFEL1iLOXX3reasyJ5xEl+Gwnpv8LpJwK8EumlhnAItkGNLl+tyZNqI4HjE7PGXtX/r3UWO0bre6ziToHkAy7q+dH4+984iadc7vtDScK3nMCiA9RzgXYWXFd5WU/bY1U33Oe/MzIg8MK+N24kjQIM1cSwrfCQoNSg3Wy4+x81x2XM3hkjYbLgfLgJ3PQiFHZO/13rfhq7R/oUII0IkAoUESIAE/EBgti4+o9ASFqNNaax598hbPXC/zNTpMKpgXJmSrbYHvKxBrYRsXks6tuGpb6Xe1Vfe9HqvsVA7f2qeoKZDEAV5rDBakddqyn/Oc9sisV6LSYXbJgEarCaNFG4/8YLmuAyICh5Kphx8gJvjgpLfFBIgAZGy8qQKhuVKfhuGzPMeIQESSD+BxUvcFjYIkzVl7z3ctnSZ3Ed6qbbka9szKqhmawpCVmG0Hnogo2FMLuXZHjIxJsOnxIfP3jY5+IsA/cfEZMz0+Gsb0y8ifTszsrA890cYv0ODNQ2zjkIMCAVGYQZbWKzAJsL9sBP46PNiZ0V2yVvel6H6B7mhwScdw5ehsN8jvH4SSCcBFEyETkexOFsmDIpIz/aZ/xJ+021FcuOg+Igx9AhFr1BK+Qm89Lq2selaKCu+8zo0rrkkx2ljA+91kAXvwPCy2m2R9ttb2yLpAsdZpwT8AoM8OT4eOw3WNEwOSt2j5L0tnVujhQ0f7DYX7pPAvHs0T0rDzuxQO4SbQcEFXYFzhkmABIJLYMC4mIyeFu8xatNMdbpWzA1Di5d//hUnl/XOB7zvNlvVdo2QKy+iEVLeO7yNequRG2zKrjtpoaWpudLotMzgiEJSKNj1519eo/yqi12dXruWefXcJgERGqwpvgvQRBwrsVFLt+EhhHL3B+1Pb1GKp4SnCwiBjv2iMnOBV4lj6DPH5kr75gwNDsg0cpgkkFEEFtwHnR6TNX96X7wbHI/0nlxBxdywCMKi2/YqFBTMM6Whvt9gYXEfDY+mbJ7AXQ+uc7yr9uJsn04RGds/szz1PYbFZPIc62VY8cAjD888hQRMAjRYTRpJ3n7xNTfH5cNPvaGNSJ6HYruocWasnCUZIw8fUgLvLnNbKLz9gffv5+jD3Dwp/EshARIggVQReONdV6e/qTmcptTZwdXpYfQqjrs5Jn1HxxshA/MjMqJ3Zhlc5pwnYnvV6vVqrEblqcXe0HK0B5pfkHm5wJ9+6er0V5Z6/37QrxgLHKccR52eiPsqU45BgzVFM7lSH0QosnTf494HEU4/fmBEenXggzxFU8HTBJgAqnC27xufJwUPKzytFBIgARJIBYE/1iBvNSYL74+P+hjWMyKDu4VTp6P6K0I9H9JqsKbsUkdDgyfmygUNuTBvcjG3J8yMSe+R8cY+2iGhLVImCiIUkM+KnrOmtLzc7QSQG84/IxMFtzcQoMGaolth4PiYjJoa/yC6Hjku6l2tUT1FA+FpSCDABIp1IRYvQ7f91/uSyBYKAZ5UDp0EAkgA+hx63ZarteUW0nu23za84a+Pa0FJPKdRjMoUtOyD5wweaIqXACKH4F39yKoy3fTcbMe7uvVWmcusszpzbp7n1emgc/PoXOnYMjMNde/sc688BGiwlodSFb+DFVisxGJF1hSEO8BYPao+wx5MLtwmgc0ReP0dN4xomRVaj2rB6M2K6sEUEiABEkgWAURKoRbFyp+9Ov0YTUtAkSVWLhcZPCEmIwriDfrRfSPSrwvdZva9mT84KtNu9RptKFiFUGD0KM1kef9jtxMA2iOZgvxv6PTjNCSaQgI0WJN8DyC3BYoNuS6m7Li9m+Ny1cWZ/SAyr5nbJJAoAlDsUPC2oC8r+rNSSIAESCAZBFCDAgvQL77mDXmtVVOcBWhULqeIfPuDGxr89IteTmxdEn93PPK0FlrKj8rvllOjk3aOmK5OjTDI3Ds1NFg7AdjS7pocmT0+HAzsa+e+lwANVi+PhO6haiAUG2L0bRnaIyJDunOV0ebCfRIoDwG0UEDeyx1WC4WaNcRZkb1Gw/IoJEACJJBIAjF1GHbWBWhU+7clE6u42tdY0f17H9PQYG3R8odVQblZU4QG5wmM/LDLX3+LtNKeq3YPXxQegnf1uCPD412ETp97l/dvK0sjoeFlRYsoSrgJ0GBN4vyjLxv6s9nSrKmb47LDdpmbk2BfM/dJINEEXtTm6lBwny/3Ri+ccVK2o+Dq7su/r0Qz5/FIIMwE0D8dfdRtQZ4h0nv22JXPHJtNz+ExmTQ7/j2oYHiu5F9PI2TG/CLp1D/+nhrTLyJ9O4fLqYGQYOh0hAibcsJRbmjw4YeEx3g3r5/bLgEarEm6E7BahlBgu+gAWm9AsZ18LP/wkoSehw0RgbKqKvbuGJFxA8Kl7EM07bxUEkg5gUVaSAg6ffm33rxVeMJQZOnsBkzvKW1SympdUv9gt3XJiUeH913os6+00JKGAtspYw1P1UJLU3Nlt53DtwAy/XbUfIk34DtreDTenSnhJUCDNQlzv0yrvCEUePESb+4GwhXxB3fdVVxVTAJ2HjKEBJDzgxVZhJ6Zst02WY6X9bImfIk0uXCbBEig4gS++gbpPVF54nnvc6aa2hMossRKpptnOu9/RU7V4CJvtKcT5olWN2GVAWNjMvomr/e5mtrvCAW+9tJwvieivQ10up1KVz3PDQ1uHlIuYf0bMa+bBqtJIwHbeCBDsc3SfpG20OtjE+E+CVSdAIp6oFjDN997PR/nnO6GBu+1e/hWqatOlUcgARLYSKDb0KgUzI3X6eiNiR6ZlC0T6NBP34sWxDNEm5s2V4fPOHvuFS20pG1sfvjJq7daXZEjt08J9z318lI3NBjeeVNOO8ENDT5o//B65U0eYdumwZrgGYdSg3KzBf3H4F3dcze+PNtsuE8CVSVQVk/EgV0jMqIXQ4Orype/TwJhJYDFZyxC297BxrogBp1+4H7U6eW5N9BnFL1Z313mNUKQnwij9bCQ5SciFNj2IuL9EKHAZ57MyKDJs4ukx/D4d+ke7SMycRB1enn+5jLtOzRYEzijCBeCYkP4kCkHH+DmuCAvgUICJJB4Aqt+cUOD0R7AlF3quKHBFzbi357JhdskQAJbJrB4iduWDmk+puy9h9uWjs8Vk8qWt8sqMHSjFl+aqkWYwiIL7i1yvKv29Q7M1wXW3jTGwGXNX65Ov+cRr07fZitXp19xIXW6ff9k+j4N1gTNMAoxwFhFYQZbpmuOS6dW4Qt5sTlwnwSSSeCxZ7SFgoYGr/zZu2CEl0qs4O+sxiuFBEiABMpDAAUTodPtdiP43Qnq4empnh5KxQhENV0TbW5szyLqe+AZfXUI2pF9ryHACAV+XkOCTTnpGLSxyZO69NiXYEHYNLzyX1uFzuD8wf2yz57U6SWwQrBBgzVBk4xS9yh5bwsrm9lEuE8CySMweEJMRhR4i1jgbFi1xuo1hQRIgATKQwAt6dCazhbkWyIUGEVgKBUn8PIbbmgwKuSacuYprhGy/96ZbYSgyBKKLdkyc2yutG9Ox4bNZYzy6l8Kr/43RmRUH+p0m1cm79NgTcDsook4momjqbgpjU5DjktEmCBuUuE2CSSPwHc/rndWZJ9a7F29RuElrMgi74xCAiRAApsjAA8gKv2v+dMbrXHq8W5buiPqsejL5vht6WcTZ8Wk1wjrhUl/CX1H0X80U+WNd7SNjXpXbWP9sgu0jY16V+FppngJ/PKbq9MfetKr0+vs4Op01IehhIMADdYqzvOLr7k5Lh9+6l0txAsyVmEvasw/pioi5q+TQIUI3P+4WzX4t9+9L5t4KZgzPlfQ8oZCAiRAAqURQE9MhAK/+Z5Xp+MFGTr9youo00vjVpHPfv/DNULu02e1KTtur0aItrlpmqFGSKf+UUEerynbb6uFlrSNzQWss2Bi8Wwv0vowaHXzw0qvTm9yttsJIIz9aj2AQrJDg7UKE41cOSg2+6GLQ44fGJFeHTJ3pbAK2PirJJB0An1GxWT8jPgVfP5dJh09T0ACgSXwh/Z1hmd14f1eowIXNKxnRAZ3o05P1OQ+qVEwMEIQFWPKBQ3d0OBddsqshUXkQrfML5S/15pXK9K1bY5MGRqeglPeqy//3tBJMRk2OV6n8++y/AyD/k0arFWYwYHjY4J2GrZc38zNcalR3f4J90mABFJB4MsVboXBF5Z4V/Dr7uv2cTvjJIb0pWIeeA4SCBKBstpjoRgQ0nvgDaMkjgAMEBgitqAVGVqSZYrAo4xQYLuKPVr5wLt6VH3qoy3NNbyrWOCAt9WUPXZ1qwafdyYjH0wumbhNg7WSs4oVWKzEYkXWlFOOc3Nc+AAyqXCbBFJP4K4Hi6SdVg22V7SvuSTHCQ1mvlDq54RnJAG/EkCkVJcBWmV8tVenH3O4q9NRxZWSWAIwQlAFFi0BTUHbINQcQB2QTJBptxZJ/uD4nqLoJ4q+opTyEXjwCTfdB3mtplxynhsavMN2XFAyuWTaNg3WSswoclsQCoxcF1OQf4Ecl6suzoyHrHlt3CaBIBLoNiQqBbfEh/cVaM+/fO39RyEBEiAB1KCATkdNClNq14ROj0irK/msMLkkcvsBDZWF0WrXHECfTRitW2vfzSALevi2zI/KOx96763zzkKhpVxBbjSl/AT6j4nJmOnxXvkx/SPStxON//KTDN43abBWcM5QNRCeVbuPGA4ztEdEhnTnH0wFkfLrJJA0Ah99XuyEES15y/uyUP8gNzSYXpOkoeeBSSAQBNAbFMYqqv3b0kdfgMfqizAluQTKqjkwaUiudG8X7MWC3iNjMmGm18DK1ZRVVAWmc6Pi99Vy7cmK0GD0aDUF7ZDm6ALHWdoeiZKZBGiwVnBe0ZcN/dlsadYULWxyhSEJNhnuk0B6Ccy7p0jaamhwkfU+et1VbmhwNvVbeieIZyeBNBJA/3T0Ubel6bmuTkeOHCW5BL74WkODe6qH+3WvEXJI3WqOlxWpVkEUtFdD7uoqK8wcvXzhPaZUjsA9D6tXvneh/PmX9/ebaXTjnAl5UruW93PuZQYBGqwVmEdUecNK7E+rvPHzRx/m5ricfGwwH6oVQMCvkkAgCXTsF5WZCyyLVa+EzdoDOZ0cNAkkhMCi51ydDq+NKTCUEAp8dgOuZplckrl9h9YFQWjwv4XesyAcG8ZdTsCmIqbqppWGAt/1kFfv7LeXtrGZmicNtKcvpfIEegyLyeQ58c6jyVpxuZtWXqZkHgEarOWcU+QhIBR4sVV1FIVb4FmFt4ZCAiTgTwLIH0IBprc/8IYGo6AKerNi0YlCAiQQHgJffeO2pbML/lTTRwF0eseW1OmpvhvgEJh+u9fAwxiCuLB4691F0ka9xrYwdcwmUrn9T78sdhY4Xlnq1emH6mITQoOD6pWvHI1w/BYN1nLMM0IJ8SCdtTD+Qdq7Y0TGDWCOSzkw8iskkFYCs/Xvt33f+BeI9i1yZOYYhmeldXJ4chJIMYFuQ7Ug29x4nX6jFmObqkXZKKkn8N5HrhHy1vteI+RYXVicOzFXjqwXjIXFFd+hjU2hvPS69zpOPUHb2Kh3dd89GWaeiLtrwb1uuk/UUustr1CvvC5ER/hqngjMvjkGDdZyTAWUGpSbLRef4+a47LkbHz42G+6TgN8IrNN3BxRruO2/3pdUhJphRbY1K4H6bco4HhJICgEsPmMR2s5rb3y6q9MP3I86PSngy3HQ2Vr8qn2f+PetTq1yZPqoYCwklNVf9hY1uq9vRs99OW6Dcn+ls7aiunmeV6fjl28ezSiJckMMyBdpsG5hohAuBMWG8CFTDj7AzXFpeGrAEivMi+A2CYSMwOtv6wq+hgYv0zYWppyk+edYka2n1YMpJEACmUtg8RK3hQ3SfExB70+EAl/YiDrd5JLqbSwsogDT7Vosz5Q8tVWRy9r8Mn8bfAhRhXd1ufXO2KxpjtPGhl4/c1arvv3+x65XHu0mTYE3HvfLsUdQp5tcgrxNg3Uzs4dCDDBWUZjBlCxdfIViw4ofhQRIIFgEymrint8mRwqGBWMFP1jEOVoS8AcBFEyETkcBRVsmDIpIz/aMIbS5pGMfbchQgOljbUtmymknwgjJEz97wFErYe6dXmN7px210JL2XD33TC6GmPOZqG3wBndb2l2bI7PHUafbXIK6T4N1MzOHUvcoeW9L59Y5jsFqf859EiAB/xP4519dwdeXoTsf8P5to4AaXoau/g9fKvw/ixwhCVScAFrSoTWdLWgzgkXo6nn2T7ifLgJltRvq1SEi4wf6c2Hhnke0jU1+oRRatpOfx5yu+U30eaHTb7nLq9PhXIKXlWHYiaadnuPRYC2DO5qId9aV2Jil2xqdhhyXiBy0P8MMykDHj0nA9wRefM2tGvz5cu8K/hknax83DQ2uuy9z2Hw/iRwgCVSAwIL7kLcakzV/etN7TtX2IjdpbuQRh1KnVwBn0r/651/am1WNEBiBpmy3TZZTgOnS8/21sLj6VxRaiopddRoV6OFdrX8w7y9zHhO9vVRDglGjAiHCppxwtNsJ4PBDyN/kEsRtGqylzBpeZhE29KGV57bX7m6Oy0WN/fWgLOUS+BEJkMAWCEyYGZPeI60VKf0dVv7eAjj+mAQCRuCNd12dbue51dkhS6arZ/WKi6jT/Tilz768zslnXfG9d5EBobXwnO2xq38WFifNLpKewy3XqkJFmgnSTSjJJ4CWSHh3t6XLdTkybQRDg20uQdunwWrN2Mqf3RyX+x73rurhawhDQWgHhQRIIPgEfl+z3lmRvfcx79+6s4KvL0OXNuFLbPBnmVcQdgJ/6N85PKsL7/eGC4LLsJ4RGdyNOt3P98ioqTEZOD5+YdFP/UzRjqdlflQ++MTr3btQnRvwrkKnUJJPAKHY8LIimsIUhPqjE0DzS7lwYHIJ2jYNVmvG8GDEA9IWxMAjx6VGdfsn3CcBEggqgadfXOcUa/jGWsE/5ww3NBhRFRQSIIHgEijL4Ln6P9DpEdl+W/6N+3l2V652Q4Mfe8a7sAjvKrysfihkVFpP31o1RY3VPC58pvjmelmrNMNo/fRL7+IBCnYh3YfpfCmekASejgarARMrsFiJxYqsKQ2OQwsbbVpdnzHwJhduk0AmECjrhXZQ14gM70XvSybMMa8hnAQQKdVF+zTC6DHlmMNdnX7SMdTpJhe/bj/8lIYGqxGCPFFTkMc6V3ubptOD+dizKLQUld9+946tQ4scmTGGYajmfKVqe7KGZ/coJTwbVcBRDZwSTAI0WDfMG3JbEPuOXBdTdtzezVu96mKGB5pcuE0CmUJg1S9uaPAjT3tX8Hepk+WEEbEvY6bMNK8jTARQgwIL0C++5v27rq2eLxRZanUFwwODdD/0HxuTMTfFR7+lM1ULFedRFdhOKzlQi3IiFPhELfhDST2BNVqwC15Wu2DXNlu5Ov2KC/k+n/pZqfoZabAqQ1QNhGKz496B1095ElWfbh6BBEigNAIIN2urfdyQw24KCqwhjGhnNV4pJEACwSAQVbsGC9Co9m9L304RGdOfXhabi9/3l3+rocE9o/L8q94FiAP3Q2/WXEHIZ6pl9sIiad83vsjPqD4R6X8j77FUz4d5vudQsEt1+td635iCTh/Q6fvsSZ1ucgnCNg1WnSX0ZUN/NluaNUULm1zZYTve2DYb7pNAphEYPCEmIwrinwMjekdkYD5fPjJtvnk9mUugrB6eTc91dbqfqstm7iwk/srufgihwYXy91rvsZtfluMYrXkpjMD94mu0sSmU197yRuWddYoWWprqrwrGXlrh2YNHHp55W7CYgEUFSrAIhN5gvX+Rm+Pyk+VZQe8sGKsnH5v6Vbtg3UIcLQlkBoHvfnSLezy12LuCv7cWXkKFwcanM4woM2aaV5HJBBY9pzpdvavwyJlySF3o9Iic3YB/xyaXoG13HRKVqbfEe86na5h3p1apC/MepAU6R5ZSoHOehgK3vDx14wja/KVyvL/85ur0h5706vSdtJ0VdPrF5/BZkMr5qOq5Qm2wLvvMzXFZvMR7M9esIYKHX+sr+dCp6g3G3yeBIBG4X4u0tNMwIruAxmUXaHEPDSPalu0JgjSdHGvICHz1jduW7onnvTq9mq47YwG6Y0vq9KDfEss0NxkFmF5/x+vZPLKehgZrAaZjtaBWsgXvjC27RuXbH7yLIi3U0wuDNYtBecmegnIfHwtY0Ok/rPTOVZOGrk7fdWdOVrlhpvmLoTVYi3SBrrOuwiIHwZbeHSMybgDDBWwu3CeBMBDoMyom42fEhxGls7hHGLjzGkmgqgRKay+CY954fY5MHZ7CeNGqXgh/f7MEbr27SNpoPqstNzTPkVljkz/PrbtHZd493nfH3XfJckKB6cG3ZyX9+0MnxWTY5Hidzj7M6Z+biowgtAZrwdwigXKzBSECWIndczeuuthsuE8CYSDwpeYmoViDHXlRF8U91Mt6+knJX8EPA2deIwkkksAsXXxGKDAWo01BKP901el196NON7kEfRte1lvu8k52jkZ4ogBTqyRGx92h7Q/hXS32OnilX5eIjO5LR4cf7yt4V3G/2JEXe+h7PnS6H3r5+pGb38YUSoMVNy0UG8KHTDn4ADfHpeGpjGs3uXCbBMJG4K4Hi5wwIru4xzWX5DgVBpE2QCEBEvAHgcVLip2IqY80zceUvfdw29KxNZVJJTO20YIQRsiHn3jn/JTj3KrByFlOtPy0CoWWovLMS96Q8xOOquaEAuMdkuJPAg8+4YYGI6/VlEu0ly+qBrO4qknFn9uhM1hRiAHGKuLaTUHOATyrqUzaN8/PbRIgAX8RKKu4B0ILEWJIIQESSD8BGBHQ6SigaMuEQRHp2Z5eL5tLpuxPu7VI8gfHR8p1bxeRSUMSP+9jb45Jv9HxoaU3j2Z+dBDuqf5jtJfv9Pj5G6ttrvpouyuKvwmEzmDtPiwqKHlvS5frcmTaiOTnPtjn5T4JkIA/CcBbg2INS6y2BfUPruasyJ50DFfT/TlzHFWYCAzQthWjtX2FLW2uznEWoavn2T/hfqYQWPuPOF5WRMSYsvVWGuqpocFXXJi4aLk33yt2vKuffOH16MJDN78gT2rXMkfAbT8SgMOqnXrln3vFu7i1/z5aNVi9rGhJRPEvgVAZrGgijkJLMUu3oZEwyt0ftD9fQP17q3JkJJB6ArdrYQ0YrXZe3HVXuaHB2dRvqZ8UnpEENhBYcB/yVmOy5k9vmN+pJ7ht6Y44lDo902+WF7Rib1stwGSneOG9DkYrwsITIfDiT7/daxhvs7UWWtKqwGyPkgjCqTnGfx92Q4P//Mv7zGjWFKHBXHhIzSxU7iyhMVhffA0tbDTfQUuim7KX9lhEKPBFjfnmaXLhNgmQgEugY7+ozFzgfVHBT1CNElUpKSRAAqkngBxG6HR4vkxBj0Xo9Csuok43uWTy9lgN8+yn4Z62DOwakRG9qh7qiT6eLfOjssYyclh92iYejP0ew2IyeU78/TJlaK50bUud7tdZDIXBuvJnN8flPu2xaAtbVdhEuE8CJGASeOdDNzT47Q+8L8bHaL8/hBEdfRi9OCYvbpM4UQ0QAAAXc0lEQVRAsgn8sQY6PSYLtWKrLWxVYRPJ/H0U0kEBJhiWpuyykxsafIH23KyswEiFsWofu95B1RzvKvQAJVgEPvlSdbreL68s9er0Qw90dToKd1H8RyAUBuvA8TEZNTV+NeX6Zm6OS43q/psYjogESMA/BNCvuX3f+OIeHVrkyIwxzH33z0xxJGEgAH0OvW7L1f+BTo/I9tsmJgzUPj73/Uvg8Wc1NFiNkJ/UQWFKU21VOHdiruy4feXuCYQBw5Nvy7gBEendsereW/u43E8NgQX3Fjnt66LW1La6wk33iXBqUzMRFThLxhusWIHFSixWZE1pcLyb43JkPa6kmFy4TQIkEE9gnS7EYkX2tv96PTo5Gj0EL2vrJPb9ix8NPyGB8BK47zG3Ld3K1V6dDk8XQoFZDC2898agCTEZWRC/kDGmX0T6dq64BYICS/Cuvvm+1xN3jvb2nTc1V3apUzkjOLwz5K8r7zwgKjfP8+p0jJBVn/01TxtHk9EG61LNbcHK2FLNdTEFK21QbFddXPkwEfN43CYBEsh8Aq+/rX3/tADTMisP/uRj3TAihIhRSIAEkkcANSig01GTwpTaNbUt3ahcgXeEEl4C33zvhgbbfVL339sNDT6zglVg+2oLm3HaysYULFKi0BK8+ZRgE3j/I1en23nwR9V3dfqxR1Cn+2mGM9ZgRdVAeFZRRdCWoT0iMqR7xVfb7ONwnwRIIFwEyur7l98mRwqGMTQ4XHcDrzaVBKJqN8BYRbV/W/pqD8Ux2kuRQgL/e9QNDbYrR8PARNXgmjXKxwhGb8uuGmKsfX5NQYX4WyfxWW8yCfL23DvdTgD2NbS7Nkdmj+M821zSuZ+xBuvoaTEZMM67MgbQzZq6OS47bMdQjnTeeDw3CQSRwD//un3/7nzA+9JcSz08KIl/9X8YtRHEeeWY/U8A/dPRR92WpueiLV2u7LErdbrNJqz7ZVWBnTo8V1DZd0tSrA58GKt3WEW99tEWOfOm5snpJ9LztiWGQfo5cp9vucur06vp42SOLnCg1g3FHwQy0mC9f5HmuGhsup18j2qeUGwI4aOQAAmQQGUIIBwRvVk/X+4NSzzjZC3uofmsB+zLF+fKcOXvkEBZBBY95+atLv/W6+06pC50ekTObsCForLYhfFz5J7CCHn1Te8z+rCDqzkFmE44avPvgPO0/3br7vGLI4O7RQRVqCmZRQBpg9Dp73/svV9OOFrvF9Xphx2y+fsls2j492oyzmBd9hlyXGKyWJtJmwIPCIxVFkcxqXCbBEigMgQmzIxJ75HxERyoGonqkRQSIIHEEPhqhduW7okXvDq9mr5DQqd3bEkPSGJIZ9ZR5v1Pq8D2jEqR97aRNle7ocFlXe23P2gbG/Wu2u+QaHUyvyBP9t+HC5JlsQvy52VVg+5yXY5MG8HQYD/MbUYZrEXq0e+sOS5oQWFLH32RHMsXSRsL90mABCpB4Pc/1jsrsvdqxVJTttN2GliRvbQJPT4mF26TQGUJdBsalYK58TodoZ0I8aSQQFkEOmgrslmlvA+izU2bMkI9R2rLpEGltEyarc/1dtdwcaQs1kH/vFAd6ugEYNe9qZ4nTu7ztZdy7tM9xxllsEKpQbnZcrH24cJK7J67cWXMZsN9EiCByhF4+sV1jtGKypSmnHNGttPqZq/d+bwxuXCbBCpKAMYGCi1hMdoUtBVBVeC6DL83sXDbIvD2B8XSRr2s72k1WFNORKin5ifW1xBhU157S9vYdC2UL772PtOvvEjb2Kh3FcYLJXMJvPyGGxr86Zfe++W0E6HTI3LQ/t77JXNJ+PPKMsZgfeJ5N8flq2+8D5qDD3BzXBqeSo+HP29BjooEgkugrNX40X0j0q8LQ4ODO7MceboJICSzs6b3fKRpPqbsrYVvsAB9YSPqdJMLt0sngD6b6LdpS7566AssD3179cjaEXpog4g2NuefzfvNZpiJ+5NnF0mP4fH3S/8bIzKqD3V6Ouc8IwxWFGJAkaVFarSakqUODii2Tq3oyje5cJsESCAxBFatdkODH3l607PnXPWwdta8lyZ8wUkMZB4ldATQSgSeVRRQtGXCoIj0bM8XR5sL90sngFBPFGBaaLU4RF2TuRPytHOEa4givaNlfqGgErwp3W/IkUmDGXpuMsnk7TV/qU7X++WeRzY9e87S/r3IlWeqT3pnPiMMVpS6R8l7W5gsbRPhPgmQQKIJPPqMGxqMAOC2muOEoh5MP0g0ZR4vTAQGjI3J6Jvii5rhbwuL0AzNDNPdUPVrfel1t2qwXdkdhghCg7fd2m1j89izm4wUnPXIetU0FDhXjjiUoaBVn4XgHOHZl12dvuZP1en6zGmjen3/vZnik+4ZDLzB+sea9TJ0ckym3VIkxUY0cKPTsmW6lrs/kDHn6b7HeH4SyHgCdz1YJFtvlSUXNGTYWMZPNi8wqQT+WisydnpMJs2Kyb+Fm0516gluWzoaD5uYcKv8BMqq7I7UjTo7ZEn3UuqfTB6SK93aMUKv/JQz55vwsEY0kOOS86jT/TKrgTdYN4KcoXkK0/U/9N9CsROswl7UmDfaRj78lwRIIHkE1mmaXTYX4ZMHmEcOHYFb7lKdfnuR0xtxJzUoUGTpigup00N3IyTogv9PK7ujzY0dZo7K7vCwfm31+G2ii4/IXd1hO3rWEjQFgTpMsep0tM6i+IdAxhisQPrcK+scBXfysdWkVwfmuPjnNuNISIAESIAESKBiBFC1c/q8mNQ/sJoM6kadXjF6/LZN4Ent5Yt81u9/MsLx7C/pfo3q4lQF5gJJKXD4EQmkiUBGGaxgiFW02rWyJMIojjTdUjwtCZAACZAACSSGAIqgRHKyHCMiMUfkUcJMYJimkA2dFJ8fbTK54docmTWOhZZMJtwmgXQTyDiDNd1AeX4SIAESIAESIAESIAH/EYB3FV5WeFtLkwP20TY2U/MEkXoUEiAB/xCgweqfueBISIAESIAESIAESIAEkkgAeawt8qOydm18aPDA/IiM6M3w8yTi56FJoFIEMsZgZYJ0peafv0QCJEACJEACJEACoSGw/Jv1ctql/8oPpeSyDuoakeG9aLCG5mbghQaGQEYYrG+8WyzPa8ElVAWudxDDOAJz93GgJBBgAr/8tl4eeXqdnHBUNT53AjyPHLr/CLy7rFie0JDNxtqe7tgjqNP9N0PBHtGQiTEZPqX0PNZDtcAXerMyJDjYc1yZ0f/1t8i9jxU5/XePqs/nTmUYJvN3Am+wzlpYJLP1v/c+KpYu1+XItBFMlE/mDcNjkwAJuAQmzS6SnsOjAsXW/NIcufbSbKefH/mQAAlUnsBt/1WdfkeRLNWF6DZXa/GbsbmSzW42lQfK3/QQeOn1YmnZtVBWfBcfDrzxi62vzHGMVt53G4mE49+ZC4qkY7+o1FfHF/Q59Ppuu7CtkV9mP7AGKx42aC4OxbZRcjWKY6Yqt+uuYongjUz4LwmQQOIJLPu0WJrfGHUWyjYe/ZwzsqW/NqE/7USuzG5kwn9JoLwEfli5XsbdrDpdF6CjhvNruvZf7dSKOr28HPm9zRNoo71Yb71703tjWd9GlWBUC6aEg8BXGibe4sZCWfKWNmDdIGedki19OuVI49O5YraRSTr/DazB+vYHxXJ1p0L5fLl3lex4Dc/Diizd+em8rXhuEshsAn1GxWT8DOOtWi+3Vk2RhdPy5D/nUbll9uzz6pJB4KPPi+WaTlF5/+NNL4w4z2GHuDqdIZrJoB6uY9710DpplV8oMcte3aVOlqxc7X2XRCg6QoOPrMcFyDDcJaW1O8pS5+rCablyzSVcuPDDPRBYgxXwJs8pkh7DonEcsSoGTytuNgoJkAAJJJLAc5ov30K9qz+u8r7gsHdfIinzWGEksDEkz772Fpe5Or1mDfsn3CeB8hFYpQZpy65ReWqxt50NDNMmZ2cLDBZbOrXOkekjmWZmc8m0/dfeRsRUoXy1wqvT8dyZP5Xz75f5DrTBuvYfkfZ9o7LwPmu5TOnCYG3fnKsifrnROA4SyBQCrbtFZd7/vM+cfffMkgXqXW1wPFfjM2WeeR2pJ7Be3xfb94nKnDu9f18YyeShudKtLXV66mclM844YWZMeo+MN0pR96RDyxynN+u8e7z3XV6eyC3qZb1WcxkpmUugU/+ozJjvnfud1esO72ojLfxG8QeBQBusQPjqm8WO0YqcMlMQxoHQ4BOO5gukyYXbJEAClSdwt4aUIc+lyLtIL2yFUHmm/E0SMAm886Gr0998z6vTD9rf1elnnEydbvLi9pYJ4J5qqX1Xl33mvaeanpst8wpyZZutspx3yba9ovLJF97vnK41CeZOyJO6+zFkb8ukg/eNh59a59Sj+PMvr3e1Z/uITBjE9kZ+mtHAG6yAefO8Iuk8ID40uJVWeoPRmkePvp/uOY6FBAJJ4Nf/Q1GGqCx63mutoq0Nclf5QhPIaeWgfUgAlYLhabVzDa+6GKHBEdl2axoPPpw23w4pf3BUpt3q9aBtVTtL5quxatYcKCvNrHfHiIwbQOPFtxNcyYH98684ocD3P+7V6cibh3f1iEO5OFZJtEn5tYwwWIv0OYTQ4NIqv00dnis3Xs9wjqTcPTwoCYSIwNRbiqTrkPiFsZs0x6mz5jpRSIAEEkegy8CoTL/da2Tg6GP7R7RyJ42HxJHO7COhVza8q7+v8XrQUHkaFahNWaNetrZaRfh/j3oNmO23zXIKMF1yPsNDTV5B356rqQftesfr9PEDI9KrA58xfpvfjDBYAfXN94ulg67Ivq2hH6agCTS8rKeewJUSkwu3SYAEyk8AYWLwrr6l1clNubBRtrMSuw09PiYWbpNAlQkgfBM6/RVN+zFl372yHJ3OVhMmFW6XRuDvtaLGaqHcv8hrgB5St5oTCnz8kfHvhc+8tM7JZ/3me6+Be95Z2Y7Rujv7cpaGOnCfYX5RaOnlN7zPl4anZms9ilzZdSdGcfhtUjPGYAVYrJbA01rsvf/k6v8gNDgiCAGhkAAJkEBFCQwYG5PRN3kLdiDVAKHAl1/IVfeK8uT3SaA8BO6439XpMDxMQRgnFqJ32pE63eTCbS8BFNJBQR1bxvSLSN/OZXvQRhbEZNAE7/MexxjaIyJDupf9e/Z5uO9fAiOn6hyPj59j5DS3vJwRU36cuYwyWAG4Y7+ooDS+LUieRhI1hQRIgAQqQuDF19W72qVQvv3Ru+J+fbMcuWWiN6SsIsfld0mABLZMoMfwmEyeHf9iObxXxCl2tuUj8BthJPDZV1poSdvYvPGO14MBDxpaley2c9mLHSt/1tBgLcD02LNez+weu2posD7zzz2Di5RBvqdQ0K25RkzhHjEFzi14V7PjHe/m17idJgIZZ7Ci6XgH9bKir5IpB+yT5bS6wcOKQgIkQALlJYAXl1vu8i6C7bkbSt7nyeknUbOVlyO/RwKVIfD58vWOTn/+Va/xgNBMtK9DWD6FBGwCpUXFVNPHNTxozcvRpgbVY5HPuvo370LlpU3c0ODttinb4LXHwn1/EbhxUFRuus2r03fcHq3pcuW8M/k88ddsbRpNxhmsuLT597oVBv8t3HSh2LrsAjeMaIft+KDxkuEeCZBAaQTufQwl7wul0HqW9O8SkVF9GbFRGjN+RgKJJoAiOKga/H9/eI2HJg1dnQ7PF4UENhJ47pV10kq9q9//5L1fWl2RI7dPKX9UTL8xMRk7Pd67P0GL8vRkUZ6NuAP1L7zmqEdhP0u6ao/nKdrrmeJfAhlpsAI3qnmiqqcto/pEpP+NfNG0uXCfBEjAS+CPP902Nqgyacoxh7sl71G4g0ICJJAaAmUZDwPzIzKiN3V6amYhGGdBKPACdVyYgqgYhAKfeXL5PWhffeOGBr9geffRE3juBBbzNPkGYTumaw9YgL7nEa9OP1R1Obyr0O0U/xLIWIP10y+1+biuyCL/zJS99KE1c1yunK8V3ygkQAIkUBaBsvo7FwzLlfw2LMpQFjd+TgLJILBCq3oi3efJF7wvm3U0lA86/VK2HEkG9sAdc8F9RU4bG3vgA3RhY2QlFjbuerDIyWdd+4/3iC0uy3GM1lw65bxgfLyH/s7X94gvwjVao6X6adQUxd8EMtZgBfa7H9IwIlVwa9RTYspFjd0wol03k3Rvfp/bJEAC4SLwxdduyXu7YAdaG6ChONMKwnU/8Gr9QeChJ12dvmq1V6c3Os3V6fvtzdBgf8xUekbxg4YAw7uKkGBTTjoGbWzy5MD9Knd/5A+OyrRbvR5bHP/m0bnSsSUXL03Wft3GvYFCSy8s8d4bZ2gdigVajwIeeIq/CWS0wQr0fUbFZPyM+BwElCZHiXIKCZAACdgEhkyMyfAp3udGtgZlwFht1pQvKDYv7pNAqggMnRSTYZO9f5s4d++OERk3gDo9VfPgx/Og9RiKLdmC4lztm1f+uf3hp8VOAaY33vVG7B1V3w0NZiipTdx/+8hFRlqBLaj0j4r/FP8TyHiDdbnmIMDLimbQpuxcx20+3vRchgabXLhNAmEn8OqbKHlfKF9/6/XiVLRgR9g58vpJIBkEflrl6nQ7t3zrrVyd3qwpdXoyuPv9mDAmW+bHtypBsc356l2tWaNqV4BK8agYb0v7Fjkycwzjgm0uftp/50NtTafe1Y8+9y44XKE91FHtn2HdfpqtsseS8QYrLv3+Reukg+az2uXJz9Xy1Wg+vvceDAUo+xbhT0ggXASwwDV7oTf8C+kD8K6e3YAvw+G6G3i1fiSw6Hm3avB3Vm/k00+CTo/IwQeweIof5y2ZY+rUPyoz5nuf29tvm+W0sUlU66PSWpzlqHMOBZiwoEnxJ4Huw2IyZY7Xu7rt1m4bm0TdG/688swaVSgMVkzZoPExGTnVe8Pi876dIzKmH8OIwIJCAmEn8OATbhubv9d6STDc0MuDeySQbgKjp2n457h4nd5VC6JN0cJolPAQgFMCbWz++tsbFZPoewE1DWC0IkTYlFOO09BgDS09hAslJhZfbD+52G1js/pX773RuXWO3DSSzwlfTFI5BxEagxX9uOA5eVx7MJmC5s+ztMIgQgMoJEAC4SUAIxWhwDBaTTmynlvy/rCD6bUxuXCbBNJJ4Nf/U52ukVP3Pe79e62eJ45Ob3k5PV7pnJ9Unfv3NVpoSUOB7RDxww6ppqHAuYI800TKVC2+1FWLMNnS44aITBxM54fNJZ37xWqjIhT4zge8nvcD93Nb0x1/VGLvjXReaxjOHRqDFZP56DMaGqxG6w8rvSstZ52SLUjKr2wFuTDcKLxGEsh0AggDxqKWLRMH50qPG/jya3PhPgmkm8CzL7s6/csVXp2OqrBI9zn8UL6QpnuOkn1+VO9FFV9bJgyKSM/2iTcgsbAJL+vdD3mNoG00hxqhwZfT+WFPRdr2y2pxNLxXRAZ1Tfy9kbYLDcmJQ2WwYk5HFMRk8IT4MKLu+kI6SV9MKSRAAuEjgAJL8K6i4JIpjU/PdhqK77wj89xNLtwmAb8QmDgrJr1GxOv0DtpuZIa2HaFkLoFlnxU7ocBvf+B9bp+n9UnmT82VOjsk57n9/KvrHKMVRT1Ngb6A0brX7sk5r3kubm+ewEptfQXvql1wtcHx8K7myT57co42T9B/Pw2dwfrzL25osB32V6umhhHpiuy1l9KT4r/blCMigeQSQAsbtLKxZYEWWmrOZ4KNhfsk4BsCf/4FnR6Tux70eryqqXMVOr3tNdTpvpmsBA+k98iYTJjpfW6j4iuqAl91cXLTvMZoC53+pbTQgecOHjxKegmUtZA1W1MA213LZ0J6Z6dyZw+dwQpMT7/oNh+321Y00MT5mXoz1z+IYUSVu534WyQQPAIopAHv6hdfe1fLsXgFg5XrsMGbU444XAReeqPY6QTw8RdeTxv6YyLd57gjqNMz7Y54SovptNRCS6vUk2ZKm6tzHC+n+VkytlHEB6HBDz/lzaHedScNDdYCTE3OTq7BnIxrypRjfvAJdHpUPvjY+zy45Hy3jU1VWxxlCqegXcf/AwAA//8/5xTiAABAAElEQVTtnQecFFXSwAvYmVUxnh4gIooRIwdmRcSczgCHCipBoohkJCNBMhKVjARFERExn6cYMGBATKcoIh+ih6KHKIpyu7PLfq96XOjXswu77ISe6X/9fkp3T0/3e//qndf1ql5VuQIjEkAZNTkivYdHYnp+521Zct/QcMxxDkAAAplJ4M5+uTJ5bp7VuUoHl5MHJ4Xl8voVrOPsQAAC/iQw6YE86Xx3bkzjWjXJkmkjw5KVFfMRB9KUQJ75uW7eJVceWWL/bh9VvZzMnZgt559ZPik9e3ZpvrTpkSsb/2u/Rl9/RQWZOSYsh/ylXFLawU1sAj2HRmTMVPv9ft+K5eQhM6arbpD0JFAuqAbrL78WSPveufLoU/mW5kJmUJs2KiwtGzO6WWDYgUAGEnj6xXxp1ilXtvxmv3B0a5slYwcycZWBKqdLGUogx9iqt5sxfe5C24jR7t4/LCwdWjCmZ4rqH1iQJ62NoeiVQd1DMrBbyHs4ofsDRkdk6ETbONIbjugTkt53JrctCe1omlx86Rv50tSM6Rt/tMf09s2yZMoIxvQ0UWORzQyswao0Xlu+3RngVq/dbsE542/lnRnZOqckZ5bOujk7EIBAUgjk5IgZ2HJk0bP2pNXJx5d3vKu1T+bvPymK4CYQiBOBdz+IjukffWaP6SfXjI7p553B33ScUKfsMl9/W+B4V19/x/7dPv+s8jJvQrbUMF7WZMr6/xRI67tyZenrdnuOPrKc42W98Fw8esnURwvjeZ+3yJ60OuoI9a5my7mn8/efTF3E+16BNlgV5viZedJtUOxMXdtbo2FE5ZL72xdv/XI9CECgGAKzHsmTNuZFwysj+4akVwdmxr1c2IdAOhCY9lCeEz3lbWvTRtExfZ+9vZ+wn04EhoyPyMB7Yz2aM+8NS2sT/p0KWfi0CQ02Y8lvW22v3i0NskTbtfdeqWhV8O6pIeLqXd1uz1c5Xnf1viPpTSDwBusf28QZ3B583J6RUbVq+ICGESAQgEBmEfhmQ4ETCrzMM0t/0XkVnHUuVaswU5VZGqc3QSGgWTl0uc/0+bFj+jgT5t/VhPsj6Ungzfe2S4suObJ2vW0YNrk+y3hXwxJKoU3SbXBExs+INaQn3ROWji155hL9xG3aXOAYqy+8anu6zzlNI6ay5Rjj8UbSm0DgDVZV3/L3o2FE//7cnpapdaIJIzLrWc+uQxhBej/mtB4CNoHhkyLSb1Tsy8XscWG57SZeLmxa7EEgvQh8+Gl0TH/vQ3tMP+4oHdNDQphmeumzsLVte+bKzIftiYhKh5RzjNUrLkxt6O2qL7c7XlZ9n3TLqSeUd0KDz6zNe6SbS7y3J5hoya5FREtOHh6WO5ozpsebdyquh8H6J3XNEqrZQr3S4sYsmWoyDO6V7f2EfQhAIB0JvP/Jdse7+vka+8Wi8XVZjneVbKLpqFXaDAGbwOxH85wcFRHPvNRN11ZwclQceAAeF5uYv/c07LZ55xzR5Fpu6dE+JGP6p9C16mrMHJPwS0OD820nn7S5JUtmjCbhjwtVXDd1skBDgT/4tz2mX3d5BScfxf778rceV+ApuhgG65/g9QdGMwzqujavTBgSls6tmKHxcmEfAulIoMvAXJk4y/47/8uB0ZT3V12c2ln6dORJmyHgVwKdBuTKfbPtv3Vt6wizTr0369T9qraYdv3XhHu26Jwrz79iW4KaGFNDgTWpll/k9l6x4eiaC0XL3GiJJST+BPqMiMjI++2Zqb3MumFNtNToasb0+BNPzRUxWF3c3/84Gka00nhg3HLCsdEMg/XO9s+Port9bEMAAiUjoC88Wsbmp5/tNVCdzITURDMxhUAAAplD4LPV0TFd1z665cjDyzleVuosu6n4d3vs9DzpMcTjWjXNnTDYOBNa+8sI1PdI9bJ6M1Xr0jJNwKRZ6JH4EXhtebSMzX++t8d0vNrxY+yXK2GwejShHladIcu3xze52WR7mzoyJIQWeICxC4E0IZBnJufVWF3wpO1xqXlMeScU+PRavEikiSppJgRKTGD+E5o1OCJbf7dfaBtcUUGmmhwVlc0aSMS/BNTwa268q594coxcc2kFmTcxLAf5MLS7uCVmalyrkY3Ej0Cr7rmi4f9uOeKwcvLgfdlSz5Q6QjKHAAZrEbrs0DdXpsyz/wD0tNFmncRdZr0EAgEIpB+BuY/lyW1dY2fph/UKSd9O/F2nn0ZpMQRKRqDHkIiMnW6HDOo3B/cIyd1d+dsvGcXUnKVlB7X8oFsq7iNOzdV/+DTcU2t8q5f1ocXedkdrsza5njBVtz73dFvXNTcztdRzPX/a/cx4PtSM60hmEcBgLUKfOpOn61nf9mR7O9oUH9aswZecz49NEdg4BAHfEvjuh2gZm5fftNdA1Ts7WsamupmRRSAAgcwksGZdgTOmv+L5+69aOTqmq7cO8R+BZ5fmmzI2sUs4tNyglh30syx7R0ODc2TN/9me/YvrVnDWs9aozphTFv39siVaxkafEbecYSKlHpwUFo2cQjKLAAZrMfp8cFE0w+C2/9kn6IzeNJM1+JC/8GNjk2EPAv4lMHpKRHoN80zDmuZqIozWN/trDZR/KdIyCKQvgUXP5DtG6+ZfbAPiapNoTSsBHF6VMd1P2tV3r+am5qrqzS1amkhDgdOh3GBx407fjiEZ1hsPoFuvpd3WZGqaVM0rmotCc1IgmUcAg3UXOtWaTlrbyStDe4akX2d+bLxc2IeAHwnoGihNef/pF/bC9Bv+rinvsylZ5Uel0SYIJIBA35ERGXFf7MSVjuc6riP+ITD9oajTwNsiDfXUkM90EJ0c0dDgJ563jW6tHauTpddehmd/T/S4eq1GTOXIex/ZY7pOPj1kvKsHmaz/SOYRwGDdhU6/+Gq7k6zhtbftHxudidUZWf3jQCAAAX8T0OySmmXSLfvvFy1jwwuDmwrbEMhsAuv/Ew0NfuFVe0zXiCmNnPLrmsjM1kps7zSEu4Xxri73LMu66LxooqVqh6aPQfJPk5lejdYNG23Pvoahq9Fa+a/p05dYTaXmyIDRERk60Z54Chmnqk5AN76O9/LUaCXxd8Vg3Q3jR5+KhhFt+TX2x0bXs+oaGAQCEPAngReXRVPe/7jJ/vvt0CJL7h/m7zVQ/iRKqyCQ3gSe+ld0TN/4o/2bcEm96HIfzVWBpJbAgDHGIJlgGyTaormm5mrzG9Iv3HPQ2IgMHhfbn3TyFqf2idh59zfe3S7NOufI19/af7+33ZQls8cxpu8klXlbGKwl0KmufdO1CF7R7IKaZRCBAAT8SUBDged7MjUeU0O9q9lpsQbKn1RpFQTSm0BxBoRWAdBqAEjqCGhdzeYm0dI3G2yDpGmjLJMZOCzl0nA+QWuEtumRKy+8Znv2tR6wellJ5Fny562dKTs5Y74dMXVYlWjE1IXGA49kLgEM1hLodt030TAi9da4Reu3aR03reeGQAAC/iKghqoarF6hlIWXCPsQCBaB7413tb2pBKDeVrdonXUd02+m7IgbS1K3W3bLlTkLYw0SNVYvTuMKDYufi4YG/2yy27rlpmuzZOa9Ydmvovso20URWGzWAuva1T+22Z/26hCSkX2ZaLKpZN4eBmsJdaqL5rXUzX9/sn9sLq8fDSPSmTIEAhDwBwENAVZj1TvJdN4ZmvI+W46ipIA/FEUrIJAiArq2UMd0ryev3tnlnfWsJxxLWYxkq2b+E3nSonOu5Nu5dKSPyao7PAOy6vYcGpExU2Oj9cYPCkuXNukX6pzM5+O338UxVp98wZ5kqn1yeSfR0knH8/eaTH2k4l4YrKWgfrdZV3FPEesqepvZnRHM7pSCJKdCILEENMmSJlvyiiZLu70pLwZeLuxDIIgEhpuMwf1M5mCvdG6dJRMGsx7OyyWR+9+bWtkaCvzS67ZBcmZtU8bGeFczoa7m6rVamzVXdB2mW046rrwTGnzO6Rhdbi7u7akP5skdfWLH9HEDw9K1LWO6m1WmbmOwlkKzG8w6BJ2R9RYqPvCAaIbBm64lNLgUODkVAgkhoOVr1Luq5Wzc0uDKaBmbffdxH2UbAhAIKoHNP0fH9EXP2kbSXtniVAJocSMvwsl6NkZNjkjv4bGTB5NNcrw7TJK8TJEHH89zjNZcj+3VsrEJDTbrWctjs8aoeu36aBkbb9ZojXDUMjZ/PZgIxxhoGXgAg7WUSlVjVY1WNV7dcuG5JjTYrH057ij+cNxc2IZAsgkUlSStojFSNRS4oTFaEQhAAAKFBF5+Mzqmf2VKqbjl7DomNNiM6bVOxIJwc0nE9oqPtzuhwKvW2JOMDa8yZWwmZMu+Gba+s0PfXJkyz16nq1ynm+et7a2ZY5zH61nRDMuaKM0tmnxLjdVbGsLLzSWTtzFY90C7mm5d0657pVvbkIwdyMJvLxf2IZAsAq+Yl0/1rn5nwsvc0s68BOjLJwIBCEDAS2DsNLOE4B6Py8uc1L5ZlkwZwe+Gl1e89zv2z5X759gG3AH7l3NCga+7PPMmGT/8NBoavPIT20A/42/R0GAmSXY+YW+v1IipHFn7tT2mN9Os0RP529xJKvO3MFj3QMeaeEm9rJqIyS377C1OsgZNv45AAALJJ3Bb11yZ+5j94lPDJERT72rdM/GUJF8j3BEC/iew1SR00TH9YZP0xy3qxdGJrra3MKa7ucRzW5Po6NrVX3+zDZKOLbNk0j2Za5BMM2sy2xexJvPO27LkvqGZ2+/SPjtFeaMr/zVaxuZSUzsZCQ4BDNY91LVmH9UBTkveuEWzkE4ziV1OrsnLsZsL2xBINIEFT0ZT3ufZ80gyoEtIhtxF5EOi+XN9CKQzAU2Eo2P6qi9tr1edU6Jjunq/kPgS+HVrgRMKvMST+VWTEKn37LRTM5d5npkb0QRM3glWXT+tZW5uJdTVKTulEVO/mefELT1uD8mYAYzpbiZB2MZgLYOWR0+JiK6X80oHkyDgfpMoAIEABJJDQJOn6MD2vClV4ZazTIbJh4x39VjWlruxsA0BCBRB4L7ZedJpQGxosCbEUU9rCEdrEdT2/JCGAWs4sFdG9QtJzzsy3yB5a4UJDe6RK59/ZU+SXHBOBScB07E1gpsTZdv/omVsHjf1a91yygnRMjaETbupBGMbg7UMet7yq4YGR+TRp+wwoiwzqKmXtVUTRrcy4OWrECgxgYmz8qTLwNgXHw2t0hArBAIQgMDuCGjmVvWyzlloj+n6PX5LdkevdJ9/bhIsaSjwio9sY+2yC0yiJeNdrWLCPoMgxZVg62UM9pHGcA+qzHw4T9r2jB3TR/cPyV3tg8slqM+D9huDtYzaf+3t7dLeDHBfeGbIzqhVXqaaGdnTTDgRAgEIJI6Avvg0M8Xm3zeZJt1yzaXRlPeavAOBAAQgUBIC734YHdM1MY5bTj4+mjVYl/0gZSfQZ0RERt5vR6hlmSWJaqze3CA4k4xbzNpdDQ1e9IztSTz4oHKOl1XLsQVN1v9HI6ZyYurVXnK+lqYLy6GVGNOD9kxofzFY46D1CTPzpOug2JmgNiZRg3paqasVB8hcAgLFEOg3KiLDJ9kvPtkmIl8TLd14TfAG+2IwcRgCECghgekP5TmeVu/pt/4jOqZrmSxkzwm89Hq+tDDeVW82dw29fmBs8JZTaU4UNVq/2WCv1bzqomhocNUqwTLQhk40lThG22O6Pm1zJ4Sl+Q3BmczY87+wzPwmBmsc9Kqx9hpG9OCi2DCiKcPD0r45f2BxwMwlIBBDYNk7xrtqZmK9A72G488yiSsQCEAAAntCQMd0NVy9MvbusHRrx5ju5VLS/e3Gca2hwPMX22yPqGbK2EzMlgvODqYH+x5TLvHuIsolDu4Rkru7BicEVkPENR/F6rV2hIN63dW7WiGYj0dJ/7wy+jwM1jip9+33oxkGP/nc/iM71RQdVy/rOafxVxYn1FwGAjsI6Kz0rEfsF5/Dq2rKe/Picw5/cztAsQEBCJSKwEcmJFiNVg0RdstxJoHbVDOmX3Qe0RtuLiXd1qy4Wn7MK2qUqXEWVPn+RxMabBIwPfeyHRqs49nMMWG5vH4wnjdNeqbJz9xyyF+0NF1YrrwwGAzcfWd7JwEM1p0syrw1ZV6eaM0or2gIg2YY1HTlCAQgEB8Ci57Nd9a55OTY1+vbMSTDegf3xcemwR4EILCnBDT5khqtmozJLbrUQMf0gw4IVqimm8GebGskjIYCv7rcNsp0XfC8Cdly9JHB5qk1aXUSdtNmOzS40d+jocEHZng+hueW6pieKz9vsfvfpU2WjB9ExNSe/M1l0ncwWOOozXwzEdu+V67M9Hh89BYTBoelc2vCiOKIm0sFmIAmqmhmBranX7RffLRu30NmJvaEY/GuBvjxoOsQiBuBojw+evERfULS+04mxkoDuri1idON8d/2Vt6PlGWf4SYZ1eTY9Ztad1Trj2aqREyXNdHSwqftMf1EM5ardzWTa/Jmqk7j3S8M1jgTXflJNIzIm7G05jHR0GDCFOMMnMsFksDkuXlyZz+P28OQYGIokI8DnYZAwgis+jI6pr/xrh0afKRZc6mVAK4ISKhmWQG/vdKUsemcI2vW2d6zG681ZWyMd5UItCjhtV8XSGvjZX3N44U+/ujyMtPkZTj/zMycjJ39aJ606h47pg830VJ9TNQUAgEM1gQ8A7qmTsOI8u2JImlyvWYYDMn++wU77CUByLlkgAjoC48mWnrnA/sF8kqTUVG9q1oOAIEABCAQLwIPPxEd07f+bl/x+itMaLBZz1o5IDVD7d6Xbk/L/03zJLHStYnzTObXqy5mbaKb5sNL8pzQ4G3b3EdNsiqzvEzXs4YyzH7b8L2WsYkNFa9v8lBoPopqZh0vAgEM1gQ9A+r9US+QV0aZQtA9TUFoBAIQ2DMCA++NyJDxdshUBfO+owNbk+t58dkzqnwLAhDYFYG77onIvdPs3x09f3B3k8W1G2P6rthpvoEWXXLkD48B1q1tSMYOhF1R7IoLRc/EyhNaj1fr8npFM/1rxn8EAkoAgzVBz8G/TbZg9bIuN9mD3XLUEeWcGdlL6/Fi7ebCNgRKQuCtFZryPkfWfWOHlbW4MUvmjCcpQ0kYcg4EIFB6Al+ZUM3bTY6Kl9+0Q6cOrRwd06+9jDG9KKqbfykwocC58qxJqOOWWidpoqWw1DKVFJBYAlpxQhMwvefJUl3nFBMabLys+m8myAf/1tJ0ufKZCb13iyY200noMMO6G0ugtzFYE6j+Bx/PEw2D8c4q/uOqCs7al7+acBgEAhAoOYGiwsr0hVFDgS+uywtjyUlyJgQgUFoC6inU36CffrYnzK4yyxE0a7CWIEFsAhNm5knXQbFrE8cNDEvXtnjPbFr23syH86Rtz1h27ZtlyZQRmWHJdRucK+Nn2NGImg1ZEy1dcyljuv1EBHsPgzXB+u82KCLjZ8aGOtzTMyT9OxMKk2D8XD6DCCz5Z7SMze9/2J3SEHsNtUcgAAEIJJpAv5ERGX5f7Jjet5Mpp9WL3yE3f/USahmbD01NW7dcbdaszptIvgE3k6K2C8y8iHpZH1hgG3QhY+drAiZd05rO8sJr+Y539b8/2RNAd96WJfcNzQyDPJ3147e2Y7AmWCOr12pocCQm41u1Q6NhRFdfwgxSglXA5TOAgBqpGgqsRqtb/mbCynQm9pSamREe5e4b2xCAgP8IaC1RXe7zz1fs3yJN9qYJmLRmJhIl0GNIRMZOt417zQY8b2K2aMgnsnsCmlywTY9c+XS1bfTXNdmCNTRYK1Cko2w3NqqGAmtCM7ccd1S0NN2ZtdOzX+6+sB1fAhis8eVZ5NUWPpXvDHC//GrPImm4w1QzwB1WhTCiIsFxEAJ/EphuskvqS6JX7r07JN3b4dXwcmEfAhBIHIGn/hUNDf7+R3tMv+T86Jh+zJGM6WrQNzfeVa/3TOutat1VpOQEJs7Kky4DY8e/7qYu672mPms6ii6Z07XNXhlyV0gGdEnPPnn7wn58CWCwxpdnsVfrbYpBjyqiGLT+YeofKAIBCBRNQBMsqXdVEy655bILKjje1cqH8HLo5sI2BCCQeAKDx0Vk0Fjbe6h37WGMiDFpakTEi1qOsUM0K/CjZrLeLWrIq3f13NPxnrm57G5bI4za9MiRBR6eB5i1nuplvSHNvPob/6ul6XLlpdft50O9xppo6cjDGdN390wE8XMM1iRpfd230QyDLy6z/0ArmZdtDSNqcCXhMUlSBbdJMwJawkZL2XhFQ4Gb/iO91/B4+8Q+BCCQHgT0pVuzBqu31S377atjekhubhDc36aZphZ9W7P20it4z7xESr6v2al1Pas3Q/7lZuJW17OmU8IvLQ+lZaK8op539cAjECiKAAZrUVQSdEzX32lY44+b7DAi9RSp0VqjOrNKCULPZdOUwLtm/Y56V9ess/9mbjWGqhqs/MWkqWJpNgQygMALr0bH9PX/sX+f6p1V3qkEcOKxwfMk/t96U8bGeFfffM+OiLngHC1jky1HVONXe08ffU32pUm/vHJ315AM7pEekXqaiEu9qx+vsp+PhqZ6hnpX99nb2zv2IRAlgMGa5Cfh7jERuWdC7A9Orw4hGdk3PX5wkoyM2wWYwJ39cmXyXDspQ6WDoynvL69PVEKAHw26DgFfEBhhjIi+RRgRnVplycQhwVurqWHSGi7tldljw3JbY7xnXi6l2Vdnh3pZn37R9upXNaXdNDT4KpN92e/Sc2hExky1n499K4pjrF5/hf/b73e+mdw+DNYka3fDxgKnjtszL9k/OFp3ShMwNb6OP9gkq4Tb+ZSADso6E7vlN9t70c3U7htravghEIAABFJNYPMv0TH9sWfsMT3b/ERp5FSLm4JjpL3+7naTSCdHvjZLoNxyS8Ms410NSwVeb9xY9mhb3x3VaP3BhKS7RZeVqdGq2ar9Kkvf0NJ0ubLRk6wsk+rK+pV9JrQLgzUFWnzuZRNGZNa+/Od7+wen/rkaGhyS448OXhhRCtTALX1MICcnWsZm0bP2S+DJx0fL2NQ+mb8RH6uPpkEgUAReeSs6pnuXLpxVp7xjtGr5rSBIa1N+xVsztEolk2jJGKu69AmJD4H+oyIybJLtpdQra5SeRuv5VbQm77xFdsTUUUeUc7yrJOLyq9b80y4M1hTpYujEiAwYHfuD07VNlowbhPcoRWrhtj4hMMsk7dBZZK/4fUD2tpd9CEAgGATGTs+THkNif7Nub5rlRE9lOoUFT5oyNsa7GrHtEel1h1nu1M+/RlQ66kU92Do+qsfSLZqFWRMw1T/Hf5MDjyzJc7yr2+2lqzKwW0gGdef5cOuR7aIJYLAWzSXhRzdtjmYYXPy8/YOjC841NLhZo+CEESUcNjdIKwLfbNCU9zmy7B17ZLvoPE3KEJaq1C1OK33SWAgEgcBWU3qkvYmcmv+EbbGVMxGaOqa3y+Dspz+YtZUtTE3NF16z32dOr6WJlsJy4nHB8DAn8zlf+LQJDTalbn773b6rhl9raPDee9nHU7mn77saCqxJytxyzmkaMZUt1C12U2G7OAIYrMWRScJxrUGlWYM1q55bNDRC176ccgI/8m4ubAeDQHGZEGePM0k7ArQeLBjappcQyBwCmhlXx/TPVtuTbbqEQcf0M2tn5piuSXQ0mY5XJt0Tlo4tmXz3conXfrdBuTJ+pj1Botf2G/cJpo1dTVu9Mnl4WO5ozvPh5cJ+0QQwWIvmkrSjo6dEpNew2B/6Di2y5P5hhAYnTRHcyBcE3v8kmvL+8zX2C1/j67Ic72oWY5sv9EQjIACBogncNztPOg2IfTlvaTLkqqc1nGHRjx/82yRaMmsTP/3C/s2+7vIKMm9iWA7Yz79JgIrWYPoc/ezL7U5o8Nvv2+xrnVje8bKe8bfUT5CsMm1U76o+J27R50NL0+1v6hYjECgJAQzWklBK4Dm/mgyot/eOyIIn7VkyzaanM7Ktb+YNPYH4ubTPCHQZmCsTZ9l/C385UJMypEfKfp/hpDkQgECSCUTM/LN6WWc/av+OaTP85vmKB5oud5vf7Afsvu5njBANBdbMtUhiCehzputZvWtD296SJdNHp97p0WdEREbebztlNFxZQ4EbXc3zkdinI7OujsHqA33qWj3NGvzFV/YMlK7/UKP1tFNTP0vmA0w0IcMJPP9KtIzNTz/bIfJBrWeY4eqmexDIWALvfRQd0z/81B7TTzJZznVMr3tmZozpWnpMvau/bLF/s4kQS+6j3c68P86Yb08alDePmK5lVc9+quS15dEyNt6KGG2MMT3DB8Z0qrhw3z0jgMG6Z9zi/i31Kql3ySvqYdUBjvplXjLsZxKBPJOLQWuueiMNah5T3vGu6uQNAgEIQCBdCKgBoZ7WAtuWk1tNUpypo8Ky7z7p0pOi2/m7STLVvEuOLH7OTqSjv9kaCnymD8JRi2555h1dYSZI1Mv68Sp7gkSTGqnRqhMlqZBW3WMjDY6oVs7xrtY7KzVtSgUH7hkfAhis8eFY5qv8z9SdVC+rt0aVXpiF6WXGywV8TmDuY3lyW9fYCZthvULSt1OGLfryuS5oHgQgEB8C7Y3BOu0h2/OlV7737rB0b5c6z1c8ejd1Xp7c0Tf2N3tEn5D0vpPf7HgwLs017p+TJx37x+qjiymVOD4FpRI1i7Fm+8+1o4GlX+eQDO3J81Ea3XJulAAGq4+ehLdXbhcd4LyzZKeabMGarIHCyj5SFk2JG4HvftAyNrny8pv2TH29s9W7mi3VDyMpQ9xgcyEIQCBpBD76LDqmv/OB7fk6toaGBofkorrpuYZv9drt0sKEAnv7dcn50URLVSvzm520h+zPG6nTo02P2LJK+1Y0tVmNl7Xxdcl71jREXBMtPbvUHtM1CdSDxvuuXngEAqUlgMFaWmIJPn/qg2bWsk/sLFmzG6KhwX6qrZVgFFw+IASKy5StgyxJxwLyENBNCGQoAY0e0eipHM+wfsM1FZzlPppULt2k36iIDJ9ku8603qyGAjf9R3p7jtNNF+72LntbQ4NzZM06Ow79YjMxMvPesNQ4PDnPWnGZsicOCYvmpEAgsCcEMFj3hFoCv6OZ3nTdy8yHY8OINKxDwzsQCGQKAfVA6EystyTCDX/XlPfZsld2pvSUfkAAAkEl0Nlk0p3kyaSrLIb3DkmfjukVHvnKWybRUudc8SbSaXFjlswZn/qstEF9xgr7XdwEcD+ztGaoWWKTaFHvu0ZMaeIxt1x9cQUnH8VBaThB4+4H26kjgMGaOvbF3nmlqVfV3szIrvjY/oPXMAoNDa5/DuEUxcLjg7Qi0GNIRMZOt2fq9zd1+7SMzbWXJS+EKa2g0VgIQCCtCKwydaV1TH/9XXtM1wQ0mlTxigvT57dOQ4G9uTYOrxotY3PheenTj7R6gErRWM2yrwmYlvzTDsetfIgJDTZe1msuTayOBoyOyNCJ9pgeMn4WnYBOZlhyKZBxapoQwGD1qaIeWBDNMJjncbQ2vk5Dg0NywP7JCe3wKR6alQEEXlwWTXn/4yY7fImSCBmgXLoAAQhYBB5ZomN6RH7bav/eXXd5NDS4SiX/j+kPPp7neFetjpmdZHnvvPdlv2gCWiJOjdbvNtrPmk4C61KbSsZ4TYS88Z56V3Pk62/t+952U5bMHof3PRHMg3RNDFYfa/tOk/Ftssn85pVR/ULS847Eh3Z478s+BOJJQMOGHlpsP9/H1FDvaracXYcogniy5loQgEDqCdw1NCL3TrW9T9qqQd1DMrCbv8f0Dcb40VBgb3K8s03plHkTsuW4oxJjBKVea+nZgoH3RmTI+NhnLZGZ94uqB3tYlWjEFN739HyO/NRqDFY/acPTFl3Xp+tZ31phhxHVqB4NI7rsgsSGdniawy4E4kZgvjFUde2qVwb3CMndXf394uZtM/sQgAAESkJg7dcFzpi+9A07XPNQ413V5T7qbfWrjLgvIn1HxhpAU0eE5fZm5Nbwm96+/S4aGvyv1+xnTd8f1cuqiZjiKYufj5ax+WObfdVeHUIysi9juk2FvT0hgMG6J9SS+B31QGmGQe+PQMOromFEfz2YWc0kqoNbxYGAhgCrsaohwW457wyT8t54V48yAyoCAQhAIBMJPP5cvjOm61pDt1x5UXRM92MZr3c/3O54VzWhjlsaXa1lbLJln73dR9n2C4HHn42GBv/yq/2s6dIyNVr3rRiflv72uzihwE++YI/ptU/W0nRhOel4IqbiQzrYV8FgTQP9dx+cK+Nm2KGT2uwhd4VkQBdmrtJAhTTRRUCTLGmyJa+oh+H2pszUe7mwDwEIZBaB/qYszDBPWRjtYV+TMXiYyRzsN+nQN1emzLPfQTTb67wJiU/i4zcW6daeu+4xYejTYsfb8YNN1YnW8RlviyvHOG5gWLq2jc890o077Y0/AQzW+DON+xW//D8TRmS8rK8ut2evdG3AtFFh+fsl8Q3tiHsHuCAE/iSgYe7qXdVyNm5pcGW0jM2++7iPsg0BCEAg8whouKaO6Zocxy1/OSi63EfLevlFnjChns275MhW40Vzixo7avQg/iagXvE2PXJFEyK5Rb2e6mU9x6xBLousXV/geFeXv29f//L60TI2RAGWhS7fdRPAYHXT8PH2wqfzpb1Zz/rzFju0Q41VTYt/2KGEUfpYfTTtTwK9hkVE68S5paIxUjUUuKExWhEIQAACQSDw9IvRMf27H+wxXdcW6piuCehSLRpKqmVsnvqXbVifUtMkWpoYFg35RPxPQMsQadbgiD30SsvGWTLLlLopV4ZHbfC4iAwaa19Yr6ehwLc0xLvq/6cjfVqIwZo+upI+IyIy8n77h0Gb39+EBd9jwoMRCPiZwCtvRsvYeF/Q2pkwYH1BQyAAAQgEiYBmcdVsrl7pcXtIxgxI/Zg+6YE86Xx3bHI8bZu2EUkfAneYsO6pnrBubf2M0WFpc8ueGZZvr9SIqRzRZGJuadYoy5nQcB9jGwJlJYDBWlaCSfy+1rbSrMHerG8acqEv/JqICYGAXwnc1jVX5j5mr4PSjIUPmqQddc9kpt6veqNdEIBAYgj88N/omO5NVrNvRR3TQyn1UH222iRaMt7VlZ/YoZ5XXGgSLZm1q4mq5ZkY0lz1g3+b0GDjZdV/3XLm36KhwaeeWPoxuKi1zZX/Gi1jc2k93kfdnNkuOwEM1rIzTOoVlpgsbO3N2pcfTKZVt2iJG01aQ4ZVNxW2/UJgwZPRlPd5dmSZkzRMk4chEIAABIJI4AVTdkTH9K//Y4/p559V3pmIPvG40hsS8eBY1PKNsPmp1qzAja/DGIkH42Rfo7jkSB1bZsmke0oX5aRh4pqP4ret9nPrl+iAZLPlfokngMGaeMZxv0NxBaF73hGSUf14+Y87cC5YJgKbTfkGHdi8CUbOqq0p77PlWArOl4kvX4YABNKbgC710SU/XtkTQ8J7jT3Z1ygu9a6qB9gtrW+OlkNxH2M7fQhETICTJmDSNa1u2XsvcRIwlXTN6bb/RcvYaIkmt5x6gpamC0utPfDWuq/DNgSKIoDBWhQVnx/TNYAaGvyMSdrglgP2i2YNZvbTTYXtVBOYOCtPugyMXQd139Cw3Hnbnq2dSXWfuD8EIACBeBHQZIqaNfixZ+wxXT2aWgngtpuS9zuZZ2wZNVYfWWIbNbp8Y96EbFHPL5K+BN402YI1NPiLr+zQ4PrnVnCM1mOO3H0GppkP50nbnrFj+uj+IbmrPU6T9H06/N1yDFZ/66fY1j3/sik+boxWTY/vlvrnaGhwSGoew6Di5sJ2agh8bgbFZsa7+v7H9uB4zaXRlPcH7L/7wTE1LeeuEIAABJJH4NW3omO6lrFzi0ai6HKfZGXknf1onrTqHmuMDOoekoHdMEbcuknX7bGmLmsPU5/VK706hGRk313reL0JXddES2+8a4/pl5yvpenCcmglxnQvV/bjQwCDNT4cU3IVLTyuBci90qWNqY82qHTrEbzXYB8C8SDQzzyfw81z6pZs82hqKPAN17AOys2FbQhAINgExs3Ik+6DY43FZGVS13W0LTrnyLJ3bGNEvarqXVUvK5L+BLaYckXqZV30rO3RP9jUAZ5pytw0uKL4sXnYRPPeOdoe05XIXJOIq/kNyYsESH8t0IPSEsBgLS0xH52/aXOBU5vVu45A1yNo1uBm/Hj4SFvBa4q+9DQzM7HfbLA9Bq2aRGu/BY8IPYYABCBQPIHf/xBnTH9osR2Oq9/QMV0N10RKcWV2Zo4Ji65fRTKHwL+W5TvrWb1RelddXEFmGX0fWjl2cmLFR1rGJldWr7UnNG5ukOV4VysQ2Jc5D4gPe4LB6kOllKZJS98wYURm7cva9bZRcM7p0QyDuggegUAqCOgM7qxH7Bevw6tqyvtsueAcnstU6IR7QgAC/ibw1ortzpj+qSkr4xYNCdbQYA0RToTofZsb76r3XaLJdVkyd2JYdD0tklkEipugGNIjJAO6xiq804BcuW+2PaYf8hdTms6EAl9pyh0hEEgkAQzWRNJN0rXHTI1Iz6GxIRp3NM+SycMJDU6SGriNi8D/mQkUNVhfMeuy3NK3Y0iG9Y4dCN3nsA0BCEAgyATun5MnHfvHhgZr8iX1tIYTMKy3M0l0ZphkOm7RWqtac1VrryKZR0ATeOo4rTlR3FL9MBMabLysWi6xUNQTe2e/XHnak+yTJWiFhPg30QQwWBNNOAnX/9XUwWpvEjA9ssT+0dHwjKkmw2AbQnmSoAVu4SXw9bcFMt+Etml4myYSOf3UaMr7E45NjIfAe3/2IQABCKQjAS0/omP6AwtsA1L7ovUytdxNPGXh01rGJkdycuyrUlPT5pGJe0v+aUKDjdH6kyk/55Yb/h7NGuxOjLhhY3RMn/9Evnz6xXbRGsHqXT3tFMZ0Nzu2E0MAgzUxXJN+1dfNekHNGvz5GjuM6DRjJOiM7Om1+EFJulK4oUPgvQ+3y/wn8pzB7fYEr8ECOQQgAIFMIKDrBXVM/+Df9piuRoKO6fEqL6O5MLSMjdfLpiHI80wo8Ck1eXfIhOdpV33oPTwioybHRunde3dIureLjYj66LPtZiI6X44wnthOreI7ebKrdvJZsAlgsGaQ/ic+YOpd3h0bRqTJEnTtS9bO6I4M6jVdSRcCETMehmLHvnRpPu2EAAQgkFQCGqLb3uSo2G47v+SWhtHQ4H0rlr0546abzMRDYt8bJgwOS+fWGCNlJ+z/K3z1tQkN7pErr71tR+lpeUQNDa57ZtGTFv8zHvm9sv3fP1qYGQQwWDNDj04vNJxHZ2TnPhYbRnT/sLB0aMHgk0HqpisQgAAEIJDhBO7okytTH4wd08cMCImG7JZF1FOm3tVPVtleXK2Trd7Vgw6IzRRblvvxXf8SeNhEQWlo8Lb/2W1sfmOWY7SGeH20wbCXdAIYrElHntgbvvNBNMPgx54BSMN6ppn1rOea7MEIBCAAAQhAAAL+J6BjuU5Ev7PSNiqPqVHOCQ2+uO6eh051MzVfx5var27ZZ28xxmq2NLp6z6/rvh7b6UOgqCzA2vopI8LSvhkWa/poMjNbisGagXqdZmZj25tZWa80axQNDdYBCUktgQIT4pVnom/yzLtCXl6Ba9t13PncfKbn7Di3cDv6HU3OYX/uulYx34nes/A6+v3dfMd9/x3X3Pkdpw1/Hr9/WEjK8gKVWq1wdwhAAAL+I6BRU5qESUMw3aKJcXS5z8EHld4T+txSTbQUm2xHDRM1UJDgEdDJEfWy6vppt2hSpVn3huVvZl0zAoFUEcBgTRX5BN5XjSGdkZ0x31gaHhk3KCxd2/hnpkzX5uw0oIwR5DaOrO2dBpJtvP35Hfe5jvEUe61IEcZWya61K6Mu9v5RAy72/tF77Tyeb9qTabJ4ZrY0vIqZ+UzTK/2BAARSS6DLwFyZOCt2TNcyYVourDSiYZ8tTFbgx56xB6HjjjKJlkwZm7NPwzApDc9MOlfXTWuJI7foGtYxA8xzUYfnws2F7eQSwGBNLu+k3U0zC+qM7HuembLjj45mGKx/bvE/PJppeMq8PMd4VONLDauoJ88YW4VGX+G/jqEYa7TtOM/tvbOMyp3fybcn85LGiBvFn8DCadly4zUYrPEnyxUhAIEgE9BxWSeitSKAW7RmpmYNvvKikv/uTjeT2bebZE5eGdorJP06lc749V6D/fQmsN08Xuplnf1onhywXzlpfXMF81+WaAImBAKpJIDBmkr6Cb63/uDooKTGpltuuraCs571wP2LDiN66fV8uayJJ/bIfQG2IVAMgYfvD8vNDfzjwS+mmRyGAAQgkHYEFjxpxvTeEfn1Nztt8HWXR0ODD61U9Jju7uhX67SMTY4sf982fC88zyRaMt7Vw6vu/hru67GdeQTeNuul5yzMk0vrVRANO0cg4AcCGKx+0EIC29Cxf67cP8djsZr7jewbkl4dip5JfeWtfLn4RgzWBKolYy+tmSV1rTQCAQhAAALxJ9BzaETGTI2tmTmwW0gGdS96THe34u4xEblnQuz3544Pi2aERSCgBH7bWiD77cvkBU+DfwhgsPpHFwlpyaero6HBb75nz6bWOLycTDVZgy+/IHb27I13t0u9hp7c5glpHRetYPBrunitkZuVVc78V7it+4Xb5rjzufuYbruOx3xuX8u6R8y5ep8/z99xT/e9XPexPncd//OaGp5WnOcebUMAAhCAQNkIrF1f4Cz30Ugot1T5qwkNNmO6eluLE62z2bxzrnyzwfbQNjWTjOpdLYd9Uhw6jkMAAikmgMGaYgUk4/bzF2sYUa78/od9twZXmtBgs/al0iH2KKXhIOdem1yDdadxtitDbKcR5hhgO4ynnced67iPF2WcOZ/v4js7vm+MSev7f37H9Xk8DE1eEuznkj0IQAACECiewOLn8p0xfdNm2/C84sLomH5ENXtML7xSy265Tqhn4b7+W7VKOcdYveT84g1d9/lsQwACEEgFAQzWVFBPwT27D8mVcdNjQ4OH3BWSAV3sMKKNPxbIgqfyd3r1ijLarGN/euM8Hr+dRmXJDL0UYOGWEIAABCAAgbQj0H90RIZNjA3t7WMyBg83mYO98vATeU4ZG292+j53mvP7xJ7v/T77EIAABFJJAIM1lfSTeO81/1fgzMjq+tRCOebIctL99pCTAU49hQgEIAABCEAAAv4n8O130dDg517eOabrkowurUPSoUWWhF2lVDXz65J/5jtrV7XWZqGcWTtaxoYMsIVE+BcCEPArAQxWv2omAe3SmmsaGvzzLwXSyGR+u71pllxcF0s1Aai5JAQgAAEIQCChBJ55yYzpphLAdz8UOGtX292atcvyNh9/tl3mPZ4vDy7Kk59+LpD7h4Ud4zahjeTiEIAABOJAAIM1DhDT6RKjJkecuqrtjLF68EFFr3NJp/7QVghAAAIQgEBQCYybkeeUudExvSRlbZTTc0vz5YuvtktbY+CSCTaoTw79hkB6EcBgTS99lbm120wupb33KvNluAAEIAABCEAAAikmkJMrku0K/y1pc/JNZHCF8iU9m/MgAAEIpJYABmuK+L/66quybt26Iu8eNotPTjnlFDnppJNM6RKTkhaBgA8I5ObmytKlS+WDDz5w/vvyyy+latWqctxxx0mdOnWkadOmEgqRvMMHqqIJEIAABCAAAQhAIGMIYLCmSJVXXnmlvPDCC7u8+1577SXnnnuuzJo1S2rUqLHLc/kQAokksH79ernhhhtkxYoVxd7mhBNOkMmTJ8uFF15Y7Dl8AAEIQAACEIAABCAAgdIQwGAtDa04nltosFaoUEEOO+ywHVfebtL5ff/992ad6c7MfwcffLA8+uijcskll+w4jw0IJIvAiy++KE2aNJHNmzc7t6xWrZqcffbZogbqTz/9JG+++aZ88sknzmfqYX3jjTfkrLPOSlbzuA8EIAABCEAAAhCAQAYTwGBNkXILDVZ9+f/222+tVmzbtk0+++wzmTZtmjzwwAPOZ2rYqlFw4oknWueyA4FEEvj111/l6KOPlk2bNjm36datm4wcOdIK/S0oKJCpU6dKhw4dnHOqV68un376qey3336JbBrXhgAEIAAB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IAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAncqY9QAABn1JREFUYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xLAYPWvbmgZBCAAAQhAAAIQgAAEIACBQBPAYA20+uk8BCAAAQhAAAIQgAAEIAAB/xL4f8LwC6aeqlDnAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='ap.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this problem, each neighbour of a city must be the solution which creates the smallest perturbation. This means that 2-opt moves will often be used because we only have to delete 2 edges as opposed to 4 in the double bridge move. In this way, 2-opt moves create small steps, and double bridge moves cause large steps.\n",
    "\n",
    "**Randomisation:** Lévy flights are used to search the space for a solution using small steps and occasionally taking larger steps to avoid getting stuck in a local optima."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to swap edges \n",
    "#to be used in the functions below\n",
    "def swap(lis,i,j):\n",
    "    store = lis[i]\n",
    "    lis[i] = lis[j]\n",
    "    lis[j] = store\n",
    "    return lis\n",
    "\n",
    "def two_opt(a_nest,a,c):\n",
    "    a_nest = a_nest[:]\n",
    "    a_nest = swap(list(a_nest),a,c)\n",
    "    return (a_nest,dist(a_nest))\n",
    "\n",
    "def double_bridge(a_nest,a,b,c,d):\n",
    "    a_nest = a_nest[:]\n",
    "    a_nest = swap(list(a_nest),a,b)\n",
    "    a_nest = swap(list(a_nest),b,d)\n",
    "    return (a_nest , dist(a_nest))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To calculate the distance of the path we travel we simply need to add the distance between our current node and our next node and add it to our total distance travelled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to calculate the distance of a path travelled \n",
    "def dist(seq):\n",
    "        ind = seq[0]\n",
    "        d = 0\n",
    "        #add the distance between current to next node\n",
    "        #gotten from the markov matrix \n",
    "        for nex in seq[1:]:\n",
    "                d += inputMatrix[ind][nex]\n",
    "                ind = nex\n",
    "        #make sure to complete the round trip by going back to orig node\n",
    "        return d+inputMatrix[seq[-1]][seq[0]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following function generates an initial order to visit the cities which are stored in $n$ nests:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to initalise a path in all of the nests \n",
    "def init_nests(inputMatrix,nests):\n",
    "    index = 0 \n",
    "    n = len(inputMatrix)\n",
    "    orig_seq= range(0,n)\n",
    "    numNests = n-1\n",
    "    for i in range(numNests):\n",
    "        if index == n-1:\n",
    "            index = 0\n",
    "        swap(list(orig_seq),index,index+1)\n",
    "        index+=1\n",
    "    nests.append((list(orig_seq[:]),dist(orig_seq)))\n",
    "    mynests = [nests*n]\n",
    "   \n",
    "    return mynests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now need to write a function to put all of this together.\n",
    "\n",
    "This solution uses Lèvy flights to create new solutions (eggs) using two-opt or double bridged moves. If the egg is better than the current egg or solution in the nest, it is replaced by the superior egg. After a certain number of generations, we replace a percentage of the worst off solutions with new ones, this represents the egg being discovered and destroyed by the host bird."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cuckoo search function \n",
    "#takes input of max generations, distance matrix, number of nests\n",
    "#and the probability of a nest being discarded\n",
    "\n",
    "def cuckoo_tsp(maxGen,inputMatrix,nests,pa):\n",
    "    mynests = init_nests(inputMatrix,nests)\n",
    "    n=len(inputMatrix)\n",
    "    for i in range(maxGen):\n",
    "        cuckoo_nest = mynests[0][randint(0,n-1)]\n",
    "        \n",
    "        #if our levy flight tells is above 2 \n",
    "        #we should take a big step\n",
    "        #or a double bridged move \n",
    "        #this does not happen often\n",
    "        #according to the power law \n",
    "        if levy(random_num())>2:\n",
    "            cuckoo_nest = double_bridge(cuckoo_nest[0],randint(0,n-1),randint(0,n-1),randint(0,n-1),randint(0,n-1))\n",
    "        \n",
    "        #normally take a short step\n",
    "        else:\n",
    "            cuckoo_nest = two_opt(cuckoo_nest[0],randint(0,n-1),randint(0,n-1))\n",
    "            \n",
    "        randomNestIndex = randint(0,n-1)\n",
    "    \n",
    "        #if the score is better in cuckoo nest than in some random nest \n",
    "        if mynests[0][randomNestIndex][1] > cuckoo_nest[1]:\n",
    "            mynests[0][randomNestIndex] = cuckoo_nest\n",
    "        \n",
    "        #now we sort the nests according to fitness \n",
    "        mynests[0]=sorted(mynests[0], key = lambda j: j[1])\n",
    "\n",
    "        #now we discard of a random percentage of them and repace them\n",
    "        #this represents the cuckoos being found \n",
    "        numNests = n-1\n",
    "        for i in range(int(n-pa*n),n-1):\n",
    "            temp = mynests[0][i]\n",
    "            mynests[0][i] = two_opt(temp[0],randint(0,n-1),randint(0,n-1))\n",
    "            \n",
    "    return mynests             "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Complexity of Cuckoo Search \n",
    "\n",
    "Cuckoo search calls upon many functions.\n",
    "\n",
    "To initialise the nests with $initnests$ we see a for loop illustrating how it runs in $O(n)$ time\n",
    "\n",
    "Both double-bridged and two-opt moves run in constant time as they simply have to switch vertices.\n",
    "\n",
    "The $sorted$ function runs in $O(nlogn)$ time\n",
    "\n",
    "Our main cuckoo search function includes all of these functions as well as two $for$ loops. The first $for$ loop runs for a number of generations we define, and the second loop runs for $(n-1)-(n-pa*n)$ times. In this way, the loops present an $O((n-1)-(n-pa*n)*maxGen)$ time complexity. \n",
    "\n",
    "We can see that dominant term is $O(nlogn)$ in this case which is better than Dijkstra's algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the matrix below we can see the output of our code, each nest contains a solution consisting of which nodes to visit in which order, as well as the total distance travelled. The best solution will be the first since we sort in ascending order according to distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([1, 6, 2, 5, 9, 3, 4, 7, 0, 8, 10], 253),\n",
       "  ([10, 4, 2, 5, 8, 3, 6, 7, 0, 9, 1], 400),\n",
       "  ([8, 7, 2, 9, 4, 10, 6, 3, 5, 1, 0], 350),\n",
       "  ([7, 9, 2, 5, 4, 3, 8, 1, 0, 6, 10], 377)]]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputMatrix = [[0 , 29 , 20 , 21 , 16 , 31 , 100 ,12 , 4  , 31 , 18],\n",
    "[29 , 0  , 15 , 29 , 28 , 40 , 72 , 21 , 29 , 41 , 12],\n",
    "[20 , 15 , 0  , 15 , 14 , 25 , 81 , 9  , 23 , 27 , 13],\n",
    "[21 , 29 , 15 , 0  , 4 ,  12 , 92 , 12 , 25 , 13 , 25],\n",
    "[16 , 28 , 14 , 4  , 0 ,  16 , 94 , 9  , 20 , 16 , 22],\n",
    "[31 , 40 , 25 , 12 , 16 , 0 ,  95 , 24 , 36 , 3 ,  37],\n",
    "[100 ,72 , 81 , 92 , 94 , 95 , 0 ,  90 , 101 ,99 , 84],\n",
    "[12 , 21 , 9 ,  12 , 9  , 24 , 90 , 0  , 15 , 25 , 13],\n",
    "[4  , 29 , 23 , 25 , 20 , 36 , 101 ,15 , 0 ,  35,  18],\n",
    "[31 , 41 , 27 , 13 , 16 , 3 ,  99,  25,  35,  0 ,  38],\n",
    "[18 , 12 , 13 , 25 , 22 , 37  ,84 , 13 , 18 , 38 , 0]]\n",
    "nests = []    \n",
    "cuckoo_tsp(2000,inputMatrix,nests,0.2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Greedy vs Greedy and Random "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now compare results of Dijkstra's greedy algorithm with the greedy-randomised CS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A greedy solution  is: 318 km travelled\n",
      "A randomised-greedy solution using CS is 255 km travelled\n"
     ]
    }
   ],
   "source": [
    "soll = dijkstra(5,inputMatrix)\n",
    "print(\"A greedy solution  is:\",soll[0] , \"km travelled\")\n",
    "nests = [] \n",
    "sol = cuckoo_tsp(2000,inputMatrix,nests,0.2)\n",
    "print(\"A randomised-greedy solution using CS is\",sol[0][0][1],\"km travelled\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see how the randomised-greedy solution using CS computes a shorter path between all of the nodes. \n",
    "Why? Well, we can see that Dijkstra's algorithm always makes the greedy choice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if distance[v] < min1 and Q[v] == False: \n",
    "                min1 = distance[v]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, in my implementation of cuckoo search, we sometimes take a larger distanced step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#if our levy flight tells is above 2 \n",
    "        #we should take a big step\n",
    "        #or a double bridged move \n",
    "        #this does not happen often\n",
    "        #according to the power law \n",
    "        if levy(random_num())>2:\n",
    "            cuckoo_nest = double_bridge(cuckoo_nest[0],randint(0,n-1),randint(0,n-1),randint(0,n-1),randint(0,n-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This avoids local minima by moving far away from the solution we were originally heading towards. We can also see that there is a probability that some eggs are found and destroyed and replaced by new ones. By removing the worst solution sets we can ensure a better solution overall:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " for i in range(int(n-pa*n),n-1):\n",
    "            temp = mynests[0][i]\n",
    "            mynests[0][i] = two_opt(temp[0],randint(0,n-1),randint(0,n-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Experimentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can input varying amounts of generations of cuckoos into our function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "nests = []\n",
    "store = []\n",
    "for i in range(1,2000,10):\n",
    "    temp = cuckoo_tsp(i,inputMatrix,nests,0.2)\n",
    "    store.append(temp[0][0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,2000,10),store)\n",
    "plt.title(\"Shortest distance found with varying number of generations\")\n",
    "plt.xlabel(\"Number of generations\")\n",
    "plt.ylabel(\"Shortest distance found\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This plot shows that increasing the number of generations improves the solution found, but only until up to around 500 generations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LOs and HCs\n",
    "\n",
    "**#greedy:** Implements both a traditional greedy algorithm and a greedy algorithm with randomisation (Cuckoo search). Analyses how the greedy choice can end up in local optima and may not be the #optimalalgorithm,\n",
    "\n",
    "**#pythonprogramming:** Cuckoo search is an algorithm traditionally applied in operations research. I applied it to a NP-hard problem to solve the TSP which required knowledge of Python to be able to interpret pseudocode, and Python code from other TSP approaches to tailor my algorithm and run properly. It was particularly difficult to track the path followed but I implemented this effectively. \n",
    "\n",
    "**#randomization:** Both analysed and implemented to Lèvy flights using random walks to avoid getting stuck in a local optima. The comparison between the greedy algorithm and the CS algorithm was evident when directly comparing the distances generated was so big.\n",
    "\n",
    "**#algorithms:** In this optimisation problem, I took 2 algorithmic approaches to the problem. I also algorithmically explained my steps, function by function, to show my understanding of the progression of the algorithm and method used.\n",
    "\n",
    "**#systemdynamics:** I create a visual to describe how a solution can get stuck in a local optima by using a greedy approach. In this way, I identify an attractor state which is to be avoided. I design an intervention to the system to avoid falling into this basin of attraction by using cuckoo search and randomisation. Applying algorithms to avoid a state was an interesting change from my traditional approach in complex systems and I enjoyed making this connection.\n",
    "\n",
    "**#simulation:** In the CS application to the TSP I iterate over many generations simulating cuckoos laying eggs, eggs surviving, and eggs being discarded to iteratively find an optimal solution. Using a metaheuristic algorithm for my simulation was especially useful because it allowed me to conceptually understand the changes that occur each generation by relating them to cuckoos and eggs and nests."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# References \n",
    "\n",
    "Gandomi, A., Yang, X., & Alavi, A. (2013). Cuckoo search algorithm: A metaheuristic approach to solve structural optimization problems. Engineering with Computers : An International Journal for Simulation-Based Engineering, 29(1), 17-35. doi:10.1007/s00366-011-0241-y\n",
    "\n",
    "Jain, P. (2017, November 22). Final Cuckoo Search. Retrieved April 22, 2019, from https://www.youtube.com/watch?v=jEYJJB0axf8\n",
    "\n",
    "Nield, T. (2018, July 10). Retrieved April 24, 2019, from https://www.youtube.com/watch?v=j1s69yf4a9Y&t=1s\n",
    "\n",
    "Ouaarab, A., Ahiod, B., & Yang, X. (2014). Discrete cuckoo search algorithm for the travelling salesman problem. Neural Computing and Applications, 24(7-8), 1659-1669. doi:10.1007/s00521-013-1402-2\n",
    "\n",
    "Python Program for Dijkstra's shortest path algorithm | Greedy Algo-7. (2018, December 13). Retrieved April 24, 2019, from https://www.geeksforgeeks.org/python-program-for-dijkstras-shortest-path-algorithm-greedy-algo-7/\n",
    "Senthil, S. (2018, March 01). Cuckoo Search Algorithm. Retrieved April 22, 2019, from https://www.youtube.com/watch?v=kVueJrVPC04\n",
    "\n",
    "Travelling salesman problem. (2019, March 23). Retrieved from https://simple.wikipedia.org/wiki/Travelling_salesman_problem\n",
    "\n",
    "Wikipedia. (2019, February 01). Cuckoo search. Retrieved April 22, 2019, from https://en.wikipedia.org/wiki/Cuckoo_search\n",
    "\n",
    "Wikipedia. (2019, April 07). Lévy flight. Retrieved April 22, 2019, from https://en.wikipedia.org/wiki/Lévy_flight"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
